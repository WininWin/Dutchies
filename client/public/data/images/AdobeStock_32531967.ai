%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.1%%For: (Robert Adrian Hillman) ()%%Title: (Art auction.eps)%%CreationDate: 5/22/11 10:19 AM%%BoundingBox: 36 -36 1260 756%%HiResBoundingBox: 36 -36 1260 756%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_screens_AI5 1.0 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 648.5 359.5 648.5 359.5%AI3_TileBox: 342 -36 954 756%AI3_DocumentPreview: Header%AI5_ArtSize: 1224 792%AI5_RulerUnits: 0%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -374 1040 0.6667 1366 915 18 0 0 6 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:36 36%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 6 Bd[<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br[0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 6 Bd[0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br[0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.03125 29.4307 L3.03125 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.89063 50.123 L5.89063 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.89063 50.123 m25.0264 50.123 L25.0264 32.4961 L5.89063 32.4961 L5.89063 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.30566 48.793 L8.30566 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 Xa 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.67578 L28.9355 1.67578 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.95703 L47.6777 4.95703 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.95703 L30.0527 4.95703 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.50293 L47.4199 6.50293 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.75293 26.1445 L2.75293 2.16992 L25.4316 2.16992 L25.4316 26.1445 Lf*U*u4.95605 7.40039 m22.582 7.40039 L22.582 25.0273 L4.95605 25.0273 L4.95605 7.40039 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.67383 m4.95605 5.67383 L4.95605 25.0273 L22.582 25.0273 L22.582 5.67383 Lf20.3887 21.3281 m7.58105 21.3281 L7.58105 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.93555 8.73633 m21.0371 8.73633 L21.0371 22.8379 L6.93555 22.8379 L6.93555 8.73633 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.623529 0 0.003922 0 0.2 0.776471 0.956863 Xa 0.623529 0 0.003922 0 0.2 0.776471 0.956863 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.901961 0 0 1 0.2 0.6 Xa 0 0.901961 0 0 1 0.2 0.6 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7542.8833 8550.9551 m-7451.0479 8550.9551 L-7451.0479 8546.6758 L-7542.8833 8546.6758 L-7542.8833 8550.9551 Ln0 O0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa-7542.6631 8548.2754 m-7543 8548.3418 -7542.4814 8548.5313 -7542.8833 8548.3887 C-7542.8379 8548.2705 -7542.7725 8548.1816 -7542.6631 8548.2754 Cf-7452.1675 8548.4414 m-7453.2529 8549.2041 -7454.6816 8548.4336 -7455.8701 8548.9199 C-7456.0098 8548.9521 -7455.8354 8548.502 -7456.1484 8548.6025 C-7457.3008 8549.1953 -7459.1162 8548.8418 -7460.5195 8548.3848 C-7460.4346 8548.2666 L-7460.7021 8548.1816 -7461.0283 8548.5723 -7461.3115 8548.5176 C-7461.3135 8548.4395 -7461.2207 8548.4063 -7461.2861 8548.2979 C-7461.3574 8548.5352 -7461.7979 8548.4082 -7461.9189 8548.584 C-7462.0303 8548.4922 -7462.0195 8548.3047 -7462.1641 8548.2002 C-7462.3262 8548.4697 L-7462.7769 8549.1094 -7463.4209 8548.4258 -7464.0361 8548.7559 C-7464.0063 8548.6934 -7463.9453 8548.6445 -7463.9941 8548.584 C-7464.9814 8548.9727 -7466.2168 8548.8994 -7467.3208 8549.043 C-7467.2769 8548.9482 -7467.2363 8548.7754 -7467.3008 8548.668 C-7467.3555 8548.9512 -7467.6963 8549.0225 -7467.9922 8549.0781 C-7468.1255 8548.7871 -7468.4995 8549.3438 -7468.8467 8549.1826 C-7468.8169 8549.1191 L-7469.0732 8549.4238 -7469.1973 8548.9434 -7469.4053 8549.3086 C-7469.5684 8549.0801 L-7469.6807 8549.4902 -7469.9395 8548.8672 -7470.1514 8549.0762 C-7470.1445 8549.1602 L-7470.3442 8549.2598 -7470.4482 8549.0537 -7470.6338 8549.123 C-7470.6514 8549.0762 L-7471.0854 8549.1826 -7471.3379 8548.9551 -7471.3271 8549.2754 C-7471.4795 8549.0186 -7470.9063 8549.1582 -7471.1455 8548.7842 C-7472.5732 8549.1152 -7474.0459 8549.0498 -7475.4834 8549.0566 C-7475.6465 8548.9277 -7475.7505 8548.8887 -7475.7871 8548.7666 C-7475.9307 8548.832 -7476.3281 8548.8262 -7476.4585 8548.9902 C-7476.4102 8548.9834 -7476.5513 8548.8262 -7476.6274 8548.8105 C-7476.8887 8548.6895 -7476.9131 8549.1621 -7477.2002 8549.0186 C-7477.0859 8548.9336 -7477.0469 8548.8301 -7477.0854 8548.7109 C-7477.3301 8548.9609 -7477.6577 8548.9209 -7477.9473 8549.002 C-7477.9023 8548.9482 -7477.8325 8548.916 -7477.8433 8548.8154 C-7478.1602 8549.0986 -7478.4209 8548.7559 -7478.6982 8548.9346 C-7478.5947 8548.75 L-7479.0415 8548.5254 -7478.7266 8549.1367 -7479.1128 8549.0039 C-7479.02 8548.9453 -7479.0527 8548.873 -7479.0361 8548.7979 C-7479.3965 8549.1338 -7479.9795 8549.0225 -7480.3389 8549.1367 C-7480.3174 8549.1113 -7480.3232 8549.0605 Y-7480.7148 8549.1025 -7481.1245 8548.998 -7481.5552 8549.1445 C-7481.7119 8549.0625 -7481.5039 8548.6934 -7481.9185 8548.7617 C-7481.9033 8549.1328 -7482.6221 8548.9141 -7482.3779 8549.334 C-7482.7319 8549.2734 -7483.2925 8549.1338 -7483.5283 8549.2598 C-7483.3691 8549.1191 -7483.7007 8548.8066 -7483.4063 8548.7754 C-7483.6289 8548.5498 L-7483.5957 8548.3984 -7483.3999 8548.6016 -7483.4707 8548.4102 C-7483.6182 8548.4258 -7484.0479 8548.5723 -7484.1797 8548.5117 C-7484.4531 8548.7393 -7484.7041 8549.1641 -7485.1465 8549.2109 C-7484.9385 8549.0664 -7485.2646 8548.8018 -7485.1235 8548.7383 C-7485.7407 8549.4482 L-7485.8877 8549.4658 -7485.7725 8549.1563 -7485.9854 8549.2529 C-7485.9746 8549.3506 -7486.0674 8549.4121 -7486.1318 8549.4922 C-7486.1875 8549.4482 -7486.7441 8549.584 -7486.8081 8549.2178 C-7486.8735 8549.0762 -7486.5684 8549.1426 -7486.7314 8549.0117 C-7487.0029 8549.0146 -7487.0151 8549.1406 -7487.2871 8549.1465 C-7487.2925 8549.0977 L-7487.4717 8549.043 -7487.8213 8549.2529 -7487.6265 8549.4551 C-7487.5015 8549.4658 -7487.6738 8549.2354 -7487.4888 8549.3418 C-7487.6152 8549.5537 -7487.9312 8549.6133 -7488.2031 8549.6162 C-7488.1104 8549.5586 -7488.1216 8549.4609 -7488.0845 8549.3574 C-7488.4497 8549.6445 -7488.8369 8549.7354 -7489.2451 8549.8555 C-7489.2515 8550.0293 -7489.0928 8549.5391 -7489.0327 8549.6309 C-7489.5557 8549.3896 -7490.1128 8549.9727 -7490.5479 8549.6201 C-7490.4766 8549.5898 -7490.5098 8549.8672 -7490.5146 8549.8184 C-7490.7666 8549.7969 -7490.7549 8549.5449 -7490.9189 8549.6377 C-7490.9355 8549.4902 -7491.1255 8549.6855 -7491.2944 8549.7305 C-7491.3818 8549.8369 -7491.3384 8549.6582 -7491.1914 8549.6426 C-7491.4268 8549.7666 -7492.3691 8549.9941 -7492.9131 8549.7793 C-7492.9023 8549.877 -7493.2471 8550.1377 -7493.3721 8550.127 C-7493.3232 8549.8984 L-7493.4375 8549.7617 -7493.7422 8549.918 -7493.7632 8549.7227 C-7494.0303 8550 -7492.7344 8549.4863 -7493.0957 8549.7002 C-7493.1895 8549.5098 -7493.5991 8550.0645 -7493.5215 8549.7529 C-7493.7725 8549.7617 -7494.0161 8550.0186 -7494.2559 8549.8047 C-7494.1865 8549.8418 -7494.0522 8549.4873 -7494.2549 8549.5039 C-7494.6123 8549.5449 -7494.3564 8549.6133 -7494.6465 8549.6895 C-7494.8281 8549.7832 L-7494.8398 8550.0059 -7495.1475 8549.7529 -7495.0146 8550.002 C-7495.0586 8549.8184 -7495.5337 8550.1152 -7495.4971 8549.7461 C-7495.4473 8549.4551 L-7495.6016 8549.4766 -7495.7002 8549.7617 -7495.8213 8549.8896 C-7495.8418 8549.8633 -7495.8823 8549.8047 -7495.8745 8549.7578 C-7495.8994 8550.2031 -7496.2432 8549.7207 -7496.4268 8550.0645 C-7496.7505 8549.9102 -7497.2495 8550.0498 -7497.4023 8549.7734 C-7497.6514 8549.9082 -7497.8784 8550.0674 -7498.1621 8549.9727 C-7498.1055 8549.9307 -7498.0283 8549.918 -7498.0122 8549.8223 C-7498.1904 8549.6914 -7498.2344 8549.8086 -7498.3975 8549.8809 C-7498.3608 8549.8145 -7498.7539 8549.6201 -7498.9521 8549.4629 C-7499.1992 8549.5957 -7499.1143 8549.8359 -7499.1392 8549.9824 C-7499.3652 8549.543 -7499.8379 8550.2656 -7500.1211 8549.8672 C-7500.0352 8549.8066 -7499.7598 8549.6514 -7499.9658 8549.541 C-7500.1919 8549.1025 -7500.4219 8549.8643 -7500.7861 8549.6543 C-7500.6968 8550.0186 L-7500.8594 8549.793 -7501.2334 8550.2305 -7501.1963 8549.8594 C-7501.3184 8549.9902 -7501.6265 8549.7383 -7501.5859 8550.0938 C-7502.1846 8549.793 -7503.0425 8550.2754 -7503.4102 8549.6377 C-7503.4961 8549.6973 -7503.7104 8549.6367 -7503.6665 8549.8193 C-7503.5239 8550.0176 -7503.4673 8549.6777 -7503.4141 8549.8125 C-7503.4912 8549.8232 -7503.5078 8549.9209 -7503.5161 8549.9697 C-7503.7021 8549.8887 -7503.8486 8549.8633 -7503.6729 8549.5674 C-7504.0869 8549.3477 -7504.1001 8550.1719 -7504.6274 8550.0322 C-7504.6035 8549.8857 -7504.6436 8549.8301 -7504.7979 8549.8535 C-7505.0903 8550.1055 L-7505.4312 8550.0469 -7505.2842 8549.7705 -7505.2925 8549.5215 C-7505.4746 8549.5645 -7505.6973 8549.5527 -7505.7803 8549.7383 C-7506.0015 8549.4258 L-7505.8398 8549.6514 -7506.1514 8549.5762 -7506.2368 8549.6367 C-7506.1514 8549.5762 L-7506.1846 8549.4697 -7506.3955 8549.5352 -7506.5024 8549.5664 C-7506.4766 8549.7207 -7506.2617 8549.7832 -7506.1445 8549.8281 C-7506.2373 8549.9375 -7506.3823 8549.9121 -7506.5059 8550.041 C-7506.4648 8549.7969 -7506.8027 8549.8672 -7506.9473 8549.8418 C-7507.1133 8549.7891 -7507.1348 8550.0605 -7507.1831 8550.0527 C-7507.1875 8549.9258 -7507.4541 8550.0313 -7507.3247 8549.8535 C-7507.2681 8549.8125 -7507.1953 8549.9766 -7507.1016 8549.8643 C-7507.2109 8549.7705 -7507.1982 8549.5498 -7507.4258 8549.7109 C-7507.5967 8549.832 -7507.3818 8550.1934 -7507.7061 8550.0391 C-7507.6211 8549.9785 -7507.6055 8549.8809 -7507.5391 8549.793 C-7507.8433 8549.666 L-7507.8564 8549.8887 L-7507.8975 8549.832 -7507.8691 8549.8125 -7507.8877 8549.7832 C-7507.9785 8550.0176 -7508.3521 8549.8555 -7508.4209 8550.1191 C-7508.5742 8550.1426 -7508.7441 8549.9648 -7508.8906 8549.9395 C-7508.8623 8549.9199 L-7509.0415 8549.7891 -7509.2793 8549.875 -7509.4297 8550.0254 C-7509.4219 8549.9766 L-7509.5195 8549.959 -7509.7505 8549.9941 -7509.8735 8550.125 C-7510.1201 8549.957 -7509.9561 8549.2842 -7510.2295 8549.5645 C-7510.48 8549.5723 -7510.6221 8549.9727 -7510.5215 8550.1152 C-7510.9717 8549.9648 -7511.4834 8550.3281 -7511.9009 8549.9824 C-7511.9658 8550.0723 -7511.9248 8550.1289 -7512.0586 8550.1816 C-7512.7197 8550.0938 -7513.4551 8550.4453 -7513.9814 8550.0078 C-7513.79 8549.9141 -7513.9688 8549.7842 -7513.9727 8549.6582 C-7514.1309 8549.8574 -7514.1631 8549.4512 -7514.2197 8549.793 C-7514.2041 8549.9941 -7514.2197 8550.0918 -7514.0337 8550.1729 C-7514.4282 8550.2813 -7515.0283 8550.2813 -7515.2471 8550.0938 C-7515.1377 8550.1865 -7515.2227 8550.248 -7515.3086 8550.3086 C-7515.2803 8549.9873 -7515.5713 8549.9395 -7515.7915 8550.0527 C-7515.8223 8550.248 L-7515.9658 8550.0469 L-7516.0503 8550.1094 -7516.0591 8550.457 -7516.2773 8550.2695 C-7516.2891 8550.1934 -7516.3018 8550.1162 -7516.3418 8550.0605 C-7516.5693 8550.2207 -7516.8906 8550.4922 -7517.1377 8550.3262 C-7517.3398 8550.041 L-7517.4453 8550.0723 -7517.6235 8550.2441 -7517.4375 8550.3262 C-7517.8594 8550.1543 -7518.1309 8550.1328 -7518.2646 8549.8857 C-7518.9912 8550.4873 -7520.0459 8550.5117 -7520.8906 8550.4688 C-7520.8652 8550.3223 L-7521.0923 8550.1855 -7520.9834 8550.5781 -7521.1416 8550.4766 C-7521.0684 8550.3369 -7521.3145 8550.1729 -7521.1362 8550.002 C-7521.4609 8549.8477 -7521.5547 8550.2559 -7521.7656 8550.3223 C-7521.7979 8550.5146 -7521.5957 8550.1992 -7521.6367 8550.4434 C-7521.6729 8550.5117 -7522.0859 8550.293 -7522.1362 8550.584 C-7522.2178 8550.4697 -7522.1543 8550.2559 -7522.1104 8550.1377 C-7522.3086 8550.2793 L-7522.5513 8549.9395 -7521.7559 8549.6719 -7522.0107 8549.2529 C-7522.1934 8549.2979 L-7522.3682 8548.9941 -7521.71 8548.9551 -7522.1689 8548.8506 C-7522.3682 8548.9941 -7522.5381 8549.416 -7522.3608 8549.5449 C-7522.7754 8549.625 -7522.5527 8550.2383 -7522.9985 8550.2139 C-7523.1201 8550.043 -7522.6416 8550.1729 -7522.7275 8549.9336 C-7522.9375 8549.6992 -7523.1484 8550.0645 -7523.3354 8549.9824 C-7523.1279 8550.0918 -7523.3032 8550.3857 -7523.4375 8550.4395 C-7523.6641 8550.3018 -7523.29 8550.1641 -7523.6113 8550.1338 C-7523.6641 8550.3018 -7523.9595 8550.4277 -7523.7041 8550.5449 C-7523.8203 8550.9258 -7524.0381 8550.4395 -7524.2129 8550.7344 C-7524.3174 8550.4658 -7523.8823 8550.1152 -7524.2354 8549.9814 C-7524.1792 8550.2393 -7524.6704 8550.332 -7524.4839 8550.7139 C-7524.6221 8550.6406 -7524.6367 8550.4375 -7524.5361 8550.2793 C-7524.7334 8550.1201 -7525.0151 8550.75 -7525.0801 8550.2383 C-7525.1479 8550.502 L-7525.21 8550.416 -7525.2983 8550.3506 -7525.3994 8550.209 C-7525.5732 8550.2041 -7525.96 8550.5664 -7525.9443 8550.168 C-7526 8550.209 -7526.3975 8550.1914 -7526.2441 8550.4658 C-7525.9971 8550.6338 -7525.96 8550.2656 -7525.8223 8550.6377 C-7525.9971 8550.334 -7526.1787 8550.6777 -7526.3213 8550.7793 C-7526.3447 8550.625 L-7526.4297 8550.6855 -7526.6255 8550.6514 -7526.6787 8550.8184 C-7526.6133 8550.7305 -7526.6475 8550.625 -7526.7148 8550.5879 C-7526.8042 8550.8223 L-7527.1494 8550.9395 -7526.8857 8550.4102 -7527.2217 8550.4785 C-7526.9663 8550.2969 L-7527.0225 8550.3359 -7527.1367 8550.1162 -7527.2979 8550.1895 C-7527.3604 8550.4033 -7527.4775 8550.6602 -7527.5313 8550.8262 C-7527.7207 8550.9199 -7527.6162 8550.585 -7527.8027 8550.8047 C-7527.5586 8550.5469 L-7527.5215 8550.4766 -7527.7231 8550.1934 -7527.9761 8550.1992 C-7528.1377 8550.2734 -7528.3887 8550.582 -7528.1338 8550.6992 C-7528.2607 8550.7031 -7528.4385 8550.5723 -7528.3379 8550.416 C-7528.6255 8550.4902 -7528.2998 8550.6465 -7528.5479 8550.7793 C-7528.6494 8550.6367 -7528.9658 8550.4336 -7529.1563 8550.2266 C-7528.8975 8549.8682 L-7529.0693 8549.8643 L-7528.8467 8549.5781 -7529.1826 8549.6465 -7529.0566 8549.3438 C-7529.1743 8549.2969 -7529.3169 8549.3994 -7529.4307 8549.4785 C-7529.0864 8549.9629 -7529.8159 8550.1406 -7529.7158 8550.582 C-7530.1875 8550.7031 -7530.0107 8549.5078 -7530.5024 8550.1992 C-7530.4219 8550.3145 -7530.6533 8550.6504 -7530.3564 8550.5225 C-7530.6494 8550.4746 -7530.5557 8550.9658 -7530.9014 8550.7832 C-7530.6455 8550.6016 -7531.1763 8550.3359 -7530.8066 8550.0723 C-7530.8311 8550.2178 -7530.6001 8550.1826 -7530.5435 8550.1426 C-7530.6641 8549.9727 -7530.5186 8549.6973 -7530.8184 8549.6973 C-7531.0015 8549.7393 -7531.2524 8549.748 -7531.2158 8549.9785 C-7531.2085 8550.2314 -7530.9365 8549.9512 -7531.0537 8550.207 C-7531.4185 8550.2949 -7531.4795 8549.9102 -7531.6304 8550.3594 C-7531.3999 8550.3232 -7531.3423 8550.584 -7531.3467 8550.7578 C-7531.6143 8550.8633 L-7531.5625 8550.6953 L-7531.9922 8550.5742 -7531.6895 8551 -7532.1055 8550.9551 C-7532.3008 8550.623 L-7532.2017 8550.3369 -7531.6953 8550.75 -7531.7695 8550.2842 C-7532.04 8550.2656 -7532.1299 8550.502 -7532.3848 8550.3818 C-7532.3281 8550.3418 -7532.2505 8550.3301 -7532.1943 8550.2891 C-7532.2915 8550.2734 -7532.3877 8549.6563 -7532.7734 8550.0176 C-7532.9727 8550.1582 -7532.8262 8550.1826 -7532.8311 8550.3574 C-7533.2656 8550.4102 -7533.3955 8550.5879 -7533.6753 8550.6152 C-7533.6177 8550.2754 -7534.1699 8550.582 -7533.8608 8550.2344 C-7533.7188 8550.4336 -7533.0903 8550.4141 -7532.9365 8550.0898 C-7533.0947 8549.6865 -7532.5952 8550.1465 -7532.5024 8549.7383 C-7532.8506 8549.7285 -7532.8335 8549.332 -7532.8896 8549.0723 C-7532.9863 8549.0537 -7533.0801 8549.1641 -7533.1377 8549.2041 C-7533.1787 8549.4482 -7533.0522 8549.4453 -7533.0449 8549.6973 C-7533.4336 8549.6309 -7533.8081 8549.7666 -7534.0225 8550.0059 C-7534.1523 8549.8848 -7534.1113 8549.6406 -7533.9575 8549.6162 C-7534.4199 8549.6895 -7534.9141 8549.6563 -7535.3535 8549.582 C-7535.0693 8549.9814 -7535.8433 8549.6758 -7535.6494 8550.0078 C-7535.4141 8550.0977 -7535.2119 8550.3818 -7535.3418 8550.5605 C-7535.4888 8550.5352 -7535.3369 8550.3857 -7535.3984 8550.3008 C-7535.5859 8550.5186 -7535.6895 8549.9512 -7535.8735 8550.2949 C-7535.4512 8550.166 -7535.7915 8549.8086 -7535.7139 8549.4961 C-7536.0186 8549.6719 -7535.7007 8549.2734 -7536.0024 8549.2734 C-7536.3057 8549.4473 -7536.6787 8549.584 -7537.0161 8549.6514 C-7537.4399 8549.3555 -7538.0898 8549.6465 -7538.4683 8549.6582 C-7538.6665 8549.5 -7538.5322 8549.1465 -7538.7471 8549.085 C-7538.9995 8549.0918 -7538.5601 8549.4658 -7538.9336 8549.3047 C-7538.8975 8549.2344 L-7539.0107 8549.3154 -7539.5825 8548.9941 -7539.6929 8549.502 C-7539.5776 8549.1191 L-7539.6475 8549.084 -7539.7119 8549.1719 -7539.7695 8549.2129 C-7539.7725 8549.0879 -7539.8535 8548.9746 -7539.7402 8548.8926 C-7539.9707 8548.6289 -7540.2241 8548.9346 -7540.4746 8548.9453 C-7540.3135 8549.1719 L-7540.7422 8549.3496 -7541.0293 8549.125 -7541.4443 8549.2041 C-7541.4316 8548.9824 L-7541.6787 8549.1152 L-7541.6182 8548.8994 -7541.8447 8548.7617 -7541.9751 8548.9414 C-7541.3335 8548.3984 L-7541.1553 8548.5293 -7541.5283 8548.666 -7541.4165 8548.8848 C-7541.3213 8549.0762 -7540.9375 8549.0146 -7540.8755 8548.8018 C-7541.0225 8548.7773 -7541.0293 8548.8262 -7541.1436 8548.9063 C-7541.1919 8548.5977 -7540.9688 8548.6094 -7540.8584 8548.4033 C-7540.9355 8548.416 -7541.0449 8548.3223 -7541.0615 8548.4199 C-7540.9102 8548.2695 -7540.7578 8548.2461 -7540.5059 8548.2383 C-7540.6763 8548.3594 -7540.4131 8548.4297 -7540.4775 8548.5176 C-7540.4575 8548.2461 -7540.2168 8548.1621 -7539.9053 8548.2383 C-7539.6831 8548.5527 -7539.3208 8548.0361 -7538.96 8548.123 C-7539.1064 8548.3984 -7539.2935 8548.6191 -7539.5127 8548.7305 C-7539.2861 8548.8682 -7539.2607 8548.7227 -7539.0337 8548.8613 C-7538.9238 8548.6563 -7538.8457 8548.3418 -7538.5503 8548.2168 C-7538.5342 8548.4199 L-7538.2666 8548.3154 -7538.2666 8548.0146 -7537.9258 8548.0723 C-7537.3418 8548.1719 -7536.7407 8548.1719 -7536.2949 8548.1973 C-7536.2783 8548.3994 L-7536.0303 8547.9658 -7535.4521 8548.2393 -7535.1182 8548.0469 C-7534.5503 8548.2422 -7533.8848 8547.8535 -7533.5938 8548.2031 C-7532.5913 8548.0469 -7531.7148 8547.8945 -7530.6768 8547.9688 C-7530.8516 8548.2637 L-7530.6655 8548.0469 -7530.7305 8548.4336 -7530.5479 8548.3896 C-7530.7578 8548.1543 -7530.2949 8548.084 -7530.1665 8547.9033 C-7529.7041 8548.1328 -7529.1104 8547.8818 -7528.7007 8547.6758 C-7528.6846 8547.8789 L-7528.2705 8547.498 -7527.7759 8547.832 -7527.2598 8547.8945 C-7527.2007 8547.9785 -7527.1074 8548.1689 -7526.9536 8548.1465 C-7526.6738 8547.8184 -7526.5273 8547.8418 -7526.1167 8547.6367 C-7525.8169 8547.6367 -7525.3301 8547.7178 -7525.0254 8547.8457 C-7523.8975 8547.3848 -7522.7456 8547.6797 -7521.5732 8547.4023 C-7521.4888 8547.6406 L-7520.3521 8547.1309 -7518.9541 8547.5938 -7517.9839 8547.332 C-7518.0776 8547.7393 L-7517.7734 8547.8643 -7517.3843 8547.6328 -7517.4619 8547.3438 C-7517.1567 8547.4688 -7516.7007 8547.1465 -7516.5068 8547.4814 C-7516.1953 8547.5566 -7516.1255 8547.293 -7515.8662 8547.2383 C-7515.2422 8547.3926 -7515.0107 8547.3574 -7514.4224 8547.2813 C-7514.5684 8547.2559 L-7514.6328 8547.3457 -7514.6387 8547.5186 -7514.4922 8547.5449 C-7514.2725 8547.4307 -7513.6846 8547.6543 -7513.9033 8547.168 C-7513.2754 8547.4482 -7512.4385 8546.9395 -7511.8271 8547.3184 C-7511.8789 8547.1855 -7511.7246 8547.1602 -7511.6602 8547.0703 C-7511.1089 8547.0645 -7510.5293 8547.3359 -7510.0898 8547.1094 C-7510.0024 8547.1758 -7510.2295 8547.3359 -7510.0049 8547.3496 C-7509.8721 8547.2979 -7510.0024 8547.1758 -7509.8384 8547.1016 C-7508.9453 8546.8535 -7508.0303 8547.3574 -7507.2188 8547.293 C-7505.7754 8547.0361 -7504.2695 8547.166 -7502.8867 8547.123 C-7502.9023 8547.2207 L-7502.4395 8546.8477 -7501.8159 8547.6025 -7501.4463 8547.041 C-7501.3369 8547.1338 -7501.0283 8547.085 -7501.1094 8547.2734 C-7500.7407 8547.0098 -7500.0771 8547.5215 -7499.5439 8547.1865 C-7499.5928 8547.1777 -7499.6211 8547.1973 -7499.6777 8547.2393 C-7499.1392 8547.4551 -7498.6641 8547.1602 -7498.0957 8547.3555 C-7498.1533 8547.3975 -7498.2583 8547.4277 -7498.2754 8547.5254 C-7498.0557 8547.7129 -7497.7549 8547.1133 -7497.6348 8547.584 C-7497.5088 8547.5801 -7497.5449 8547.3477 -7497.6221 8547.3613 C-7496.3779 8547.5449 -7495.0498 8547.2441 -7493.7549 8547.1367 C-7492.8271 8547.418 -7493.6982 8547.9297 -7492.9663 8547.5781 C-7492.9063 8547.6689 -7492.9229 8547.3984 -7492.9131 8547.4961 C-7492.6299 8547.3643 -7492.4717 8548.0215 -7492.2754 8547.7754 C-7492.3564 8547.4863 -7492.1445 8547.6133 -7492.1387 8547.4375 C-7491.5713 8547.625 -7491.4575 8547.8857 -7491.0098 8547.666 C-7491.0435 8547.8184 L-7490.5186 8547.3887 -7489.9102 8547.6191 -7489.4673 8547.123 C-7486.5728 8547.0322 -7483.7983 8546.7578 -7480.9761 8546.7002 C-7478.1865 8546.7949 -7475.4551 8546.5723 -7472.6221 8546.8359 C-7471.9585 8547.2354 -7471.9087 8547.2246 -7471.1797 8547.0625 C-7471.2095 8547.127 -7471.2549 8547.1426 -7471.2061 8547.2031 C-7471.1699 8546.875 -7470.6929 8547.1719 -7470.6235 8546.8594 C-7469.5762 8546.9199 -7468.6113 8546.8301 -7467.5337 8546.8281 C-7467.7041 8546.8633 -7467.7896 8547.1309 -7467.5869 8547.1094 C-7467.3755 8546.8994 L-7467.3408 8546.9922 L-7467.2021 8546.9434 -7467.0513 8546.7813 -7467.1943 8546.6758 C-7464.4873 8546.3926 -7461.8242 8547.0498 -7459.1729 8546.9697 C-7458.5439 8547.1064 -7457.6475 8546.9814 -7456.9629 8546.9141 C-7454.9355 8547.3506 -7453.1084 8547.7041 -7451.0479 8547.3984 C-7451.3174 8548.2461 -7452.1675 8548.4414 Vf-7542.2578 8548.2422 m-7542.1855 8548.4063 -7541.9497 8548.4961 -7542.1377 8548.7139 C-7542.1611 8548.5605 -7542.2822 8548.3887 -7542.2578 8548.2422 Cf-7535.9619 8549.9297 m-7535.9536 8549.8809 -7535.8721 8549.9961 -7535.8521 8550.0225 C-7535.9297 8550.0352 -7536.0024 8550.1729 -7536.0645 8550.0879 C-7535.9854 8550.0762 -7535.9976 8549.998 -7535.9619 8549.9297 Cf-7534.3521 8550.0273 m-7534.3765 8550.1729 -7534.7207 8550.2891 -7534.9238 8550.3066 C-7534.3521 8550.0273 Lf-7532.8521 8550.6289 m-7532.7227 8550.752 -7532.7583 8550.8193 -7532.9326 8550.8154 C-7532.9453 8550.7383 -7532.8877 8550.6992 -7532.8521 8550.6289 Cf-7532.7456 8550.2969 m-7532.6211 8550.293 -7532.5591 8550.3789 -7532.4985 8550.4629 C-7532.5029 8550.3369 -7532.7871 8550.541 -7532.7456 8550.2969 Cf-7529.4893 8550.7207 m-7529.4111 8550.709 -7529.2417 8550.5879 -7529.1689 8550.75 C-7529.2505 8550.6367 -7529.5498 8550.9346 -7529.4893 8550.7207 Cf-7527.9761 8550.5 m-7527.9272 8550.5098 -7527.9072 8550.5361 -7527.8506 8550.4961 C-7527.7607 8550.5625 -7527.8555 8550.6689 -7527.9312 8550.6826 C-7527.9761 8550.5 Lf-7500.4287 8549.9141 m-7500.5923 8549.9863 L-7500.5684 8549.8418 L-7500.4287 8549.9141 Lf-7488.3574 8549.9063 m-7488.1943 8549.8145 -7488.2441 8550.043 -7488.2168 8550.0645 C-7488.3643 8550.0801 -7488.1621 8549.8848 -7488.3574 8549.9063 Cf-7481.8486 8549.1777 m-7481.8984 8549.1816 L-7481.8818 8548.8818 L-7481.8486 8549.1777 LfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -(1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.74902 0.678431 0.670588 0.901961 0 0 0 Xa(Black)Pc0 0.992157 1 0 1 0 0 Xa(RGB Red)Pc0.062745 0 0.964706 0 1 1 0 Xa(RGB Yellow)Pc0.627451 0 1 0 0 1 0 Xa(RGB Green)Pc0.517647 0 0.12549 0 0 1 1 Xa(RGB Cyan)Pc0.882353 0.768627 0 0 0 0 1 Xa(RGB Blue)Pc0.270588 0.815686 0 0 1 0 1 Xa(RGB Magenta)Pc0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.796078 0.968627 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.34902 0.870588 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.047059 0 0.933333 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.862745 0.176471 1 0.039216 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.901961 0.333333 0.988235 0.258824 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.760784 0 0.74902 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.784314 0.090196 0.458824 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.87451 0.52549 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.992157 0.964706 0.035294 0.003922 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262745 0.247059 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.34902 1 0.372549 0.109804 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.117647 1 0.494118 0.007843 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.968627 0.203922 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.227451 0.27451 0.4 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.4 0.427451 0.52549 0.066667 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.505882 0.529412 0.607843 0.235294 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.576471 0.603922 0.639216 0.419608 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.227451 0.384314 0.635294 0.011765 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.317647 0.490196 0.741176 0.098039 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.360784 0.572549 0.839216 0.227451 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.392157 0.639216 0.933333 0.356863 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415686 0.698039 0.968627 0.490196 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.478431 0.733333 0.835294 0.682353 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.1 g(K=90)Pc0.2 g(K=80)Pc0.3 g(K=70)Pc0.4 g(K=60)Pc0.5 g(K=50)Pc0.6 g(K=40)Pc0.7 g(K=30)Pc0.8 g(K=20)Pc0.9 g(K=10)Pc0.95 g(R=241 G=241  B=242)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 A1 Ap0 O0.094118 0.109804 0.376471 0 0.909804 0.85098 0.662745 Xa0 J 0 j 1 w 4 M []0 d0 XR36 756 m1260 756 L1260 -36 L36 -36 L36 756 Lf%_u%_151.5703 544.457 m%_361.3589 830.9131 960.123 805.7832 1152.4316 544.457 c%_1344.7324 283.125 1152.4316 -36 Y%_151.5703 -36 L%_-58.2129 258.001 151.5703 544.457 v%_f%_/ShapeBlendPathID (B) XT%_/ShapeBlendPathType (K) XT%_0.035294 0.043137 0.113725 0 0.956863 0.933333 0.87451 Xa%_747.4277 67.3789 m%_790.3906 118.3965 913.0127 113.9209 952.3955 67.3789 c%_991.7773 20.8359 952.3955 -36 Y%_747.4277 -36 L%_704.4658 16.3613 747.4277 67.3789 v%_f%_/ShapeBlendPathID (A) XT%_/ShapeBlendPathType (K) XT%_U0 Ap0 Au1 Ap0 O0.094118 0.109804 0.376471 0 0.909804 0.85098 0.662745 Xa0 J 0 j 1 w 4 M []0 d0 XR151.5703 544.457 m361.3589 830.9131 960.123 805.7832 1152.4316 544.457 c1344.7324 283.125 1152.4316 -36 Y151.5703 -36 L-58.2129 258.001 151.5703 544.457 vf/ShapeBlendPathID (B) XT/ShapeBlendPathType (K) XT0 Ap0.094118 0.109804 0.372549 0 0.909804 0.85098 0.666667 Xa162.4043 535.7827 m369.1597 817.958 959.2656 793.2036 1148.7949 535.7827 c1338.3145 278.3564 1148.7949 -36 Y162.4043 -36 L-44.3457 253.6074 162.4043 535.7827 vf0.094118 0.105882 0.368627 0 0.909804 0.854902 0.670588 Xa173.2378 527.1084 m376.9604 805.0034 958.4102 780.6245 1145.1572 527.1084 c1331.8975 273.5869 1145.1572 -36 Y173.2378 -36 L-30.4785 249.2139 173.2378 527.1084 vf0.090196 0.109804 0.360784 0 0.913725 0.854902 0.67451 Xa184.0723 518.4346 m384.7607 792.0483 957.5537 768.0449 1141.5205 518.4346 c1325.4805 268.8184 1141.5205 -36 Y184.0723 -36 L-16.6118 244.8203 184.0723 518.4346 vf0.090196 0.101961 0.360784 0 0.913725 0.858824 0.678431 Xa194.9058 509.7603 m392.5615 779.0928 956.6973 755.4653 1137.8838 509.7603 c1319.0635 264.0488 1137.8838 -36 Y194.9058 -36 L-2.74463 240.4268 194.9058 509.7603 vf0.090196 0.101961 0.352941 0 0.913725 0.858824 0.682353 Xa205.7393 501.0859 m400.3618 766.1387 955.8398 742.8867 1134.2461 501.0859 c1312.6455 259.2813 1134.2461 -36 Y205.7393 -36 L11.1221 236.0332 205.7393 501.0859 vf0.090196 0.105882 0.345098 0 0.913725 0.858824 0.686275 Xa216.5732 492.4116 m408.1621 753.1841 954.9834 730.3071 1130.6094 492.4116 c1306.2275 254.5117 1130.6094 -36 Y216.5732 -36 L24.9888 231.6406 216.5732 492.4116 vf0.082353 0.101961 0.341176 0 0.917647 0.862745 0.690196 Xa227.4072 483.7378 m415.9629 740.2285 954.127 717.7275 1126.9727 483.7378 c1299.8105 249.7422 1126.9727 -36 Y227.4072 -36 L38.856 227.2471 227.4072 483.7378 vf0.082353 0.101961 0.337255 0 0.917647 0.862745 0.694118 Xa238.2402 475.064 m423.7637 727.2744 953.2705 705.1484 1123.335 475.064 c1293.3926 244.9746 1123.335 -36 Y238.2402 -36 L52.7222 222.8535 238.2402 475.064 vf0.082353 0.101961 0.333333 0 0.917647 0.862745 0.698039 Xa249.0747 466.3896 m431.5645 714.3193 952.4141 692.5693 1119.6982 466.3896 c1286.9766 240.2051 1119.6982 -36 Y249.0747 -36 L66.5894 218.46 249.0747 466.3896 vf0.082353 0.098039 0.329412 0 0.917647 0.866667 0.701961 Xa259.9082 457.7153 m439.3647 701.3643 951.5576 679.9897 1116.0615 457.7153 c1280.5586 235.4355 1116.0615 -36 Y259.9082 -36 L80.4561 214.0664 259.9082 457.7153 vf0.082353 0.098039 0.32549 0 0.917647 0.866667 0.705882 Xa270.7417 449.041 m447.1655 688.4092 950.7012 667.4102 1112.4248 449.041 c1274.1416 230.667 1112.4248 -36 Y270.7417 -36 L94.3232 209.6729 270.7417 449.041 vf0.078431 0.094118 0.321569 0 0.921569 0.870588 0.709804 Xa281.5762 440.3672 m454.9663 675.4546 949.8447 654.8311 1108.7871 440.3672 c1267.7246 225.8984 1108.7871 -36 Y281.5762 -36 L108.1904 205.2793 281.5762 440.3672 vf0.078431 0.094118 0.313725 0 0.921569 0.870588 0.713726 Xa292.4092 431.6929 m462.7661 662.5 948.9883 642.252 1105.1504 431.6929 c1261.3066 221.1289 1105.1504 -36 Y292.4092 -36 L122.0566 200.8867 292.4092 431.6929 vf0.078431 0.094118 0.309804 0 0.921569 0.870588 0.717647 Xa303.2432 423.0186 m470.5674 649.5449 948.1318 629.6729 1101.5137 423.0186 c1254.8887 216.3604 1101.5137 -36 Y303.2432 -36 L135.9238 196.4922 303.2432 423.0186 vf0.078431 0.090196 0.305882 0 0.921569 0.87451 0.721569 Xa314.0767 414.3447 m478.3672 636.5908 947.2744 617.0938 1097.876 414.3447 c1248.4717 211.5918 1097.876 -36 Y314.0767 -36 L149.79 192.0996 314.0767 414.3447 vf0.078431 0.090196 0.301961 0 0.921569 0.87451 0.72549 Xa324.9111 405.6709 m486.1685 623.6348 946.418 604.5137 1094.2393 405.6709 c1242.0547 206.8223 1094.2393 -36 Y324.9111 -36 L163.6572 187.7051 324.9111 405.6709 vf0.07451 0.094118 0.294118 0 0.92549 0.87451 0.729412 Xa335.7446 396.9961 m493.9688 610.6802 945.5615 591.9346 1090.6025 396.9961 c1235.6367 202.0537 1090.6025 -36 Y335.7446 -36 L177.5244 183.3125 335.7446 396.9961 vf0.07451 0.086275 0.290196 0 0.92549 0.878431 0.733333 Xa346.5781 388.3223 m501.7695 597.7256 944.7051 579.3555 1086.9648 388.3223 c1229.2197 197.2852 1086.9648 -36 Y346.5781 -36 L191.3916 178.9189 346.5781 388.3223 vf0.07451 0.086275 0.286274 0 0.92549 0.878431 0.737255 Xa357.4121 379.6484 m509.5698 584.7705 943.8486 566.7764 1083.3281 379.6484 c1222.8018 192.5166 1083.3281 -36 Y357.4121 -36 L205.2578 174.5254 357.4121 379.6484 vf0.07451 0.082353 0.282353 0 0.92549 0.882353 0.741176 Xa368.2461 370.9736 m517.3701 571.8159 942.9922 554.1963 1079.6914 370.9736 c1216.3848 187.7471 1079.6914 -36 Y368.2461 -36 L219.125 170.1318 368.2461 370.9736 vf0.070588 0.086275 0.27451 0 0.929412 0.882353 0.745098 Xa379.0801 362.2993 m525.1714 558.8608 942.1357 541.6172 1076.0547 362.2993 c1209.9678 182.9785 1076.0547 -36 Y379.0801 -36 L232.9922 165.7383 379.0801 362.2993 vf0.070588 0.086275 0.270588 0 0.929412 0.882353 0.74902 Xa389.9136 353.625 m532.9717 545.9063 941.2793 529.0381 1072.417 353.625 c1203.5498 178.209 1072.417 -36 Y389.9136 -36 L246.8584 161.3447 389.9136 353.625 vf0.070588 0.078431 0.266667 0 0.929412 0.886275 0.752941 Xa400.7471 344.9521 m540.7725 532.9512 940.4219 516.459 1068.7793 344.9521 c1197.1328 173.4404 1068.7793 -36 Y400.7471 -36 L260.7256 156.9512 400.7471 344.9521 vf0.070588 0.082353 0.262745 0 0.929412 0.886275 0.756863 Xa411.5811 336.2773 m548.5728 519.9966 939.5664 503.8799 1065.1426 336.2773 c1190.7148 168.6709 1065.1426 -36 Y411.5811 -36 L274.5928 152.5586 411.5811 336.2773 vf0.070588 0.07451 0.258824 0 0.929412 0.890196 0.760784 Xa422.415 327.6025 m556.374 507.041 938.709 491.2998 1061.5059 327.6025 c1184.2988 163.9023 1061.5059 -36 Y422.415 -36 L288.46 148.1641 422.415 327.6025 vf0.062745 0.078431 0.25098 0 0.933333 0.890196 0.764706 Xa433.2485 318.9287 m564.1743 494.0869 937.8525 478.7207 1057.8691 318.9287 c1177.8809 159.1338 1057.8691 -36 Y433.2485 -36 L302.3262 143.7715 433.2485 318.9287 vf0.062745 0.078431 0.247059 0 0.933333 0.890196 0.768627 Xa444.082 310.2549 m571.9746 481.1318 936.9961 466.1416 1054.2314 310.2549 c1171.4629 154.3652 1054.2314 -36 Y444.082 -36 L316.1934 139.3779 444.082 310.2549 vf0.062745 0.07451 0.25098 0 0.933333 0.894118 0.768627 Xa454.916 301.5801 m579.7754 468.1768 936.1396 453.5625 1050.5957 301.5801 c1165.0459 149.5957 1050.5957 -36 Y454.916 -36 L330.0605 134.9844 454.916 301.5801 vf0.062745 0.07451 0.243137 0 0.933333 0.894118 0.772549 Xa465.75 292.9063 m587.5757 455.2222 935.2832 440.9824 1046.958 292.9063 c1158.6289 144.8271 1046.958 -36 Y465.75 -36 L343.9268 130.5908 465.75 292.9063 vf0.058824 0.07451 0.235294 0 0.937255 0.894118 0.776471 Xa476.584 284.2324 m595.376 442.2676 934.4258 428.4033 1043.3213 284.2324 c1152.2109 140.0586 1043.3213 -36 Y476.584 -36 L357.7939 126.1973 476.584 284.2324 vf0.058824 0.070588 0.235294 0 0.937255 0.898039 0.780392 Xa487.4175 275.5586 m603.1768 429.3125 933.5703 415.8242 1039.6836 275.5586 c1145.7939 135.2891 1039.6836 -36 Y487.4175 -36 L371.6611 121.8047 487.4175 275.5586 vf0.058824 0.070588 0.227451 0 0.937255 0.898039 0.784314 Xa498.251 266.8848 m610.9775 416.3574 932.7129 403.2446 1036.0469 266.8848 c1139.377 130.5205 1036.0469 -36 Y498.251 -36 L385.5273 117.4102 498.251 266.8848 vf0.058824 0.066667 0.223529 0 0.937255 0.901961 0.788235 Xa509.085 258.21 m618.7783 403.4028 931.8574 390.666 1032.4102 258.21 c1132.959 125.752 1032.4102 -36 Y509.085 -36 L399.3945 113.0166 509.085 258.21 vf0.058824 0.066667 0.219608 0 0.937255 0.901961 0.792157 Xa519.9189 249.5361 m626.5791 390.4482 931 378.0864 1028.7734 249.5361 c1126.542 120.9824 1028.7734 -36 Y519.9189 -36 L413.2617 108.624 519.9189 249.5361 vf0.054902 0.070588 0.211765 0 0.941176 0.901961 0.796078 Xa530.7524 240.8613 m634.3794 377.4932 930.1436 365.5068 1025.1357 240.8613 c1120.125 116.2139 1025.1357 -36 Y530.7524 -36 L427.1284 104.2305 530.7524 240.8613 vf0.054902 0.066667 0.207843 0 0.941176 0.905882 0.8 Xa541.5859 232.1875 m642.1797 364.5386 929.2871 352.9277 1021.499 232.1875 c1113.707 111.4453 1021.499 -36 Y541.5859 -36 L440.9951 99.8369 541.5859 232.1875 vf0.054902 0.066667 0.203922 0 0.941176 0.905882 0.803922 Xa552.4199 223.5137 m649.9805 351.583 928.4307 340.3477 1017.8613 223.5137 c1107.29 106.6758 1017.8613 -36 Y552.4199 -36 L454.8623 95.4434 552.4199 223.5137 vf0.054902 0.058824 0.2 0 0.941176 0.909804 0.807843 Xa563.2539 214.8389 m657.7813 338.6289 927.5742 327.7686 1014.2246 214.8389 c1100.873 101.9072 1014.2246 -36 Y563.2539 -36 L468.729 91.0498 563.2539 214.8389 vf0.05098 0.062745 0.192157 0 0.945098 0.909804 0.811765 Xa574.0879 206.165 m665.582 325.6738 926.7178 315.1895 1010.5879 206.165 c1094.4551 97.1387 1010.5879 -36 Y574.0879 -36 L482.5962 86.6563 574.0879 206.165 vf0.05098 0.062745 0.188235 0 0.945098 0.909804 0.815686 Xa584.9214 197.4902 m673.3818 312.7188 925.8613 302.6104 1006.9512 197.4902 c1088.0371 92.3691 1006.9512 -36 Y584.9214 -36 L496.4629 82.2627 584.9214 197.4902 vf0.05098 0.058824 0.184314 0 0.945098 0.913725 0.819608 Xa595.7554 188.8174 m681.1826 299.7646 925.0039 290.0313 1003.3135 188.8174 c1081.6201 87.6006 1003.3135 -36 Y595.7554 -36 L510.3296 77.8691 595.7554 188.8174 vf0.05098 0.058824 0.180392 0 0.945098 0.913725 0.823529 Xa606.5889 180.1426 m688.9834 286.8086 924.1484 277.4521 999.6768 180.1426 c1075.2031 82.832 999.6768 -36 Y606.5889 -36 L524.1968 73.4766 606.5889 180.1426 vf0.05098 0.058824 0.172549 0 0.945098 0.913725 0.827451 Xa617.4229 171.4688 m696.7842 273.8545 923.291 264.8721 996.04 171.4688 c1068.7861 78.0625 996.04 -36 Y617.4229 -36 L538.0635 69.082 617.4229 171.4688 vf0.043137 0.054902 0.168627 0 0.94902 0.917647 0.831373 Xa628.2563 162.7949 m704.584 260.8994 922.4355 252.293 992.4023 162.7949 c1062.3682 73.2939 992.4023 -36 Y628.2563 -36 L551.9302 64.6895 628.2563 162.7949 vf0.043137 0.054902 0.164706 0 0.94902 0.917647 0.835294 Xa639.0898 154.1201 m712.3848 247.9453 921.5781 239.7139 988.7656 154.1201 c1055.9512 68.5254 988.7656 -36 Y639.0898 -36 L565.7974 60.2959 639.0898 154.1201 vf0.043137 0.05098 0.160784 0 0.94902 0.921569 0.839216 Xa649.9238 145.4463 m720.1855 234.9902 920.7217 227.1348 985.1289 145.4463 c1049.5332 63.7559 985.1289 -36 Y649.9238 -36 L579.6641 55.9023 649.9238 145.4463 vf0.043137 0.05098 0.156863 0 0.94902 0.921569 0.843137 Xa660.7578 136.7715 m727.9863 222.0352 919.8652 214.5557 981.4912 136.7715 c1043.1162 58.9873 981.4912 -36 Y660.7578 -36 L593.5308 51.5088 660.7578 136.7715 vf0.043137 0.05098 0.14902 0 0.94902 0.921569 0.847059 Xa671.5908 128.0977 m735.7871 209.0801 919.0088 201.9766 977.8545 128.0977 c1036.6992 54.2178 977.8545 -36 Y671.5908 -36 L607.3979 47.1152 671.5908 128.0977 vf0.039216 0.047059 0.145098 0 0.952941 0.92549 0.85098 Xa682.4248 119.4238 m743.5869 196.125 918.1523 189.3965 974.2178 119.4238 c1030.2813 49.4492 974.2178 -36 Y682.4248 -36 L621.2646 42.7227 682.4248 119.4238 vf0.039216 0.05098 0.141176 0 0.952941 0.92549 0.854902 Xa693.2588 110.749 m751.3877 183.1709 917.2959 176.8174 970.5801 110.749 c1023.8643 44.6807 970.5801 -36 Y693.2588 -36 L635.1313 38.3281 693.2588 110.749 vf0.039216 0.05098 0.133333 0 0.952941 0.92549 0.858824 Xa704.0928 102.0762 m759.1885 170.2158 916.4395 164.2383 966.9434 102.0762 c1017.4473 39.9111 966.9434 -36 Y704.0928 -36 L648.9985 33.9346 704.0928 102.0762 vf0.039216 0.043137 0.129412 0 0.952941 0.929412 0.862745 Xa714.9268 93.4014 m766.9883 157.2607 915.582 151.6592 963.3066 93.4014 c1011.0293 35.1426 963.3066 -36 Y714.9268 -36 L662.8652 29.542 714.9268 93.4014 vf0.035294 0.047059 0.12549 0 0.956863 0.929412 0.866667 Xa725.7607 84.7275 m774.7891 144.3057 914.7256 139.0801 959.6689 84.7275 c1004.6123 30.374 959.6689 -36 Y725.7607 -36 L676.7324 25.1484 725.7607 84.7275 vf0.035294 0.043137 0.121569 0 0.956863 0.933333 0.870588 Xa736.5938 76.0527 m782.5898 131.3516 913.8701 126.5 956.0322 76.0527 c998.1943 25.6045 956.0322 -36 Y736.5938 -36 L690.5996 20.7549 736.5938 76.0527 vf1 Ap0.035294 0.043137 0.113725 0 0.956863 0.933333 0.87451 Xa747.4277 67.3789 m790.3906 118.3965 913.0127 113.9209 952.3955 67.3789 c991.7773 20.8359 952.3955 -36 Y747.4277 -36 L704.4658 16.3613 747.4277 67.3789 vf/ShapeBlendPathID (A) XT/ShapeBlendPathType (K) XTU(Adobe Path Blends) 1 0 92 XP%444342410000000000008040CCCCCC7D3600000000000000430000000000%0000000000000000000002000000410000000000000000000000FFFFFFFF%FFFFFFFF000000004200000000000000000080BFFFFFFFFFFFFFFFFF3600%0000*u0 Ap1 D0.223529 0.619608 0.898039 0.07451 0.729412 0.435294 0.219608 Xa629.5449 -27.2793 m623.9219 -24.3789 609.7734 -19.1191 600.5234 -2.97559 C600.3418 -2.97559 605.7832 -2.25 605.9648 -1.52539 c606.1465 -0.799805 600.7051 12.8037 Y604.5137 88.6201 605.7832 95.1484 v607.0537 101.6787 612.3135 121.0869 610.6816 128.8857 c609.0488 136.6855 594.5381 219.9375 590.1855 234.0859 C590.3662 233.9043 594.5381 233.9043 594.7197 234.9932 c594.9004 236.0811 585.832 269.6348 585.1074 276.165 c584.3809 282.6943 578.9404 317.1582 583.6563 340.7373 c588.3711 364.3164 592.1816 378.6445 588.7344 387.7139 c585.2891 396.7832 575.8574 403.8574 569.1455 412.5625 c562.4346 421.2686 558.2656 431.6133 550.8281 434.5137 C551.1895 437.5977 L552.6406 436.6904 555.1797 437.0527 V555.1797 437.2344 555.1797 438.8672 Y558.8086 439.4102 558.4453 441.9492 V558.4453 441.7676 561.166 442.1309 560.6211 443.582 C560.6211 443.7637 563.7051 442.8574 564.249 443.0391 c564.793 443.2188 558.2637 445.5762 559.3516 454.2832 C559.3516 454.1016 560.9844 454.6465 Y560.0771 447.3906 562.2539 445.9395 V560.6211 449.749 562.2539 455.0088 V562.2539 455.1904 570.2344 455.1895 572.0488 455.7344 c573.8623 456.2783 574.9512 458.999 574.4063 460.8125 c573.8623 462.627 573.6816 464.6221 575.6758 464.9844 C576.9336 464.9844 576.2334 467.4707 574.8105 467.873 C575.1113 467.8984 577.1133 469.0703 576.9453 470.2451 c576.7646 471.5146 574.9512 472.6035 575.4951 474.2354 C575.6758 474.2354 580.2109 476.2305 580.2109 477.6816 c580.2109 479.1328 578.3975 481.6719 577.4902 482.3975 c576.583 483.123 573.1367 487.8389 572.9551 488.9258 c572.7744 490.0156 573.8623 491.4668 573.8623 494.1875 c573.8623 496.9072 572.0488 503.0742 Y572.9551 514.501 570.7793 517.584 V569.6914 520.3047 568.2402 520.668 v566.7891 521.0313 557.9004 524.4775 Y558.8076 528.2861 549.9199 528.2861 V549.5586 528.1045 548.1074 530.4629 543.3906 529.7373 C543.0273 529.5566 533.959 533.002 524.3457 527.1973 C524.1641 527.0166 519.9932 527.5605 515.6396 521.9375 c511.2871 516.3145 505.6641 488.9258 502.7617 480.584 c499.8594 472.2402 498.2285 448.2979 501.1289 443.2188 c504.0313 438.1406 512.375 440.1367 Y511.8301 438.1406 514.0078 438.8672 V512.7373 437.0527 512.0117 436.5088 v511.2871 435.9648 513.1006 435.4199 Y496.5957 421.4512 501.3105 390.2559 v506.0264 359.0586 519.2676 336.749 514.1885 320.7871 c509.1104 304.8262 493.873 274.7178 498.0449 230.6416 C498.0449 228.8281 503.4863 227.7393 Y505.6621 208.876 506.0254 196.542 v506.3887 184.207 511.4668 151.5596 510.5596 146.4814 C510.7412 145.9365 508.7461 144.124 508.3828 134.6914 c508.0195 125.2607 500.9463 94.9707 501.4902 72.6602 c502.0352 50.3506 505.6621 -1.3584 506.75 -3.71582 c507.4756 -5.16797 509.4707 -4.44141 Y507.8379 -13.6914 509.4707 -16.4121 v511.1035 -19.1328 515.6367 -25.957 516.1816 -33.2129 C516.1816 -34.6641 520.8984 -34.4824 520.8984 -33.3945 c520.8984 -32.3057 520.8984 -23.4189 523.9805 -21.6045 C527.4268 -22.875 531.0547 -28.1348 v534.6826 -33.3945 540.7432 -36 566.2422 -36 C567.6934 -35.8203 566.9688 -34.3682 Y569.1445 -32.0107 565.3359 -28.9268 v561.5273 -25.8447 547.5313 -15.667 545.5371 -12.7666 c543.542 -9.86426 542.8438 -4.44141 Y547.5605 -2.80859 548.1045 -1.7207 v548.6484 -0.631836 544.1143 11.5352 543.752 24.4131 c543.3887 37.291 545.9277 77.5576 545.9277 89.5293 c545.9277 101.499 549.375 109.1172 551.5518 125.623 c553.7285 142.127 554.8164 156.457 Y559.7139 139.7695 561.3457 132.6963 V561.165 132.5146 561.1641 107.1221 Y555.1787 92.4297 555.3604 71.7529 v555.542 51.0762 555.7227 20.9668 558.2627 15.3438 C557.5371 1.37695 561.5273 -3.51855 V562.6152 -4.24414 564.792 -5.15137 Y563.5225 -13.4941 565.1543 -16.7607 v566.7871 -20.0244 572.4102 -25.2129 573.6797 -35.1885 C573.6797 -36.6387 578.9395 -35.9131 578.7588 -34.8252 c578.5762 -33.7363 577.6699 -25.7559 579.8457 -22.3105 C580.0273 -22.3105 585.2871 -23.3984 590.0039 -28.4766 c594.7197 -33.5547 598.5293 -35.8047 614.4902 -35.9863 c630.4512 -36.168 633.5352 -34.5352 632.8086 -32.7207 C632.627 -32.7207 635.168 -30.1816 629.5449 -27.2793 cf0 D569.9502 514.2754 m571.2539 510.3633 571.1504 505.7695 571.1504 505.7178 C570.9414 506.8145 569.376 509.6309 569.376 509.7363 C569.8457 511.249 569.9502 514.2754 Yf*U*u1 D0.196078 0.396078 0.745098 0.011765 0.803922 0.607843 0.352941 Xa485.9414 -29.4258 m487.5645 -22.0098 481.5371 -18.5313 v475.5156 -15.0576 458.6138 -17.1387 447.9502 -5.34375 C448.1587 -5.21484 448.9531 -4.36426 448.3921 -2.30859 c447.6968 0.241211 431.7041 92.877 430.7764 104.9297 c429.8496 116.9824 429.1533 145.7236 429.8496 148.9697 c430.5454 152.2129 435.1802 228.0078 428.2271 270.1934 C428.2271 269.96 431.2407 273.4395 429.3857 279.2334 C429.3857 279.002 433.0947 308.9033 431.4722 325.8242 c429.8496 342.7432 428.9224 364.0674 430.5454 380.292 c432.1675 396.5186 424.7495 412.7422 415.4785 430.3574 c412.2334 436.8496 398.7896 443.8018 Y398.4341 447.1123 395.3667 447.3125 V394.4849 453.7754 395.2183 454.5098 v395.9546 455.2441 397.8638 457.4473 397.7168 459.0645 c397.5698 460.6807 398.4512 462.7373 Y407.854 462.4443 410.499 462.8838 v413.1426 463.3242 413.4355 466.998 412.2617 468.9082 c411.0854 470.8164 410.9385 472.873 413.29 473.7559 C415.0522 474.4893 412.8477 476.8418 Y414.1709 478.1631 414.6118 479.6318 v415.0522 481.1016 412.4072 481.541 414.1709 483.8926 C414.3179 483.8926 416.3755 484.1865 416.9614 484.333 c417.5493 484.4785 419.1655 486.2422 419.0181 487.124 c418.8716 488.0049 416.3755 490.3564 416.3755 491.2383 c416.3755 492.1191 412.8477 497.1133 413.1426 498.582 c413.4355 500.0527 414.9043 500.9336 415.0522 501.9619 c415.1982 502.9902 414.0244 508.8652 413.4355 510.6289 c412.8477 512.3926 411.2334 519.8848 Y413.1426 524.293 404.6216 529.875 v396.1011 535.458 376.2686 542.0684 366.4253 535.75 c356.5811 529.4336 350.1191 512.5391 352.9102 497.8486 c355.7007 483.1582 359.3735 474.9307 359.52 474.7842 c359.6665 474.6367 358.9331 463.4707 358.4917 462.4434 C358.6382 462.4434 352.4678 463.1777 351.293 459.5059 C351.293 459.3584 338.8066 457.7441 Y322.7935 455.834 314.8604 443.2012 v306.9272 430.5664 295.0278 414.5537 279.748 396.7773 c266.2344 380.7656 270.3462 374.7422 272.1099 371.8037 c273.8726 368.8643 284.7446 355.7891 291.7959 345.8018 c298.8472 335.8105 316.6235 320.5322 Y317.9458 314.5088 323.6743 314.8037 V323.6743 314.7275 324.5513 312.834 326.6392 310.4316 C292.1196 280.8213 L300.3555 273.1221 315.48 265.0566 V319.0117 281.6016 326.3491 294.3428 334.7476 304.0391 C335.2935 303.75 335.8623 303.4688 336.4556 303.2002 C336.75 302.9023 333.2231 289.3906 Y328.8154 284.541 332.9292 281.4551 V332.9292 281.3086 332.9624 262.7764 337.3662 244.001 C337.5981 243.7705 338.9893 192.3125 338.0625 175.1631 c337.1333 158.0068 339.2202 144.333 Y333.1943 128.3408 331.3394 116.9824 v329.4849 105.624 322.9956 39.1016 325.5444 5.49316 C321.3726 -4.47461 324.8501 -12.5859 V326.4727 -15.1357 333.1943 -15.3682 Y330.6445 -26.0303 332.4995 -29.5068 V332.9624 -29.7373 330.6445 -33.9102 334.8164 -35.3008 c338.9893 -36.6924 369.353 -35.7656 373.5249 -34.6055 c375.1479 -34.1436 375.1479 -29.7373 373.9893 -29.2754 C374.2202 -29.2754 376.769 -22.0889 372.3667 -18.3818 C370.5112 -16.5254 366.3394 -12.3545 366.5723 -10.501 C366.8032 -10.501 373.9893 -8.18262 373.9893 -6.56055 c373.9893 -4.9375 374.2202 9.66504 Y381.4058 66.918 380.4785 81.75 v379.5518 96.584 381.4058 112.1143 Y384.4199 86.8506 385.1143 69.4678 v385.8101 52.082 395.3125 7.5791 398.7896 1.78516 C399.021 1.55176 397.6309 -14.1279 400.1797 -14.1279 c402.731 -14.1279 404.3521 -13.8965 Y403.8887 -18.5313 405.5112 -21.5449 v405.7432 -22.0098 404.1211 -22.0098 405.0479 -30.585 C405.0479 -32.6719 413.1602 -33.1348 425.6772 -33.832 C428.2271 -33.832 432.6309 -31.9775 Y433.7886 -34.5273 453.9556 -35.6855 v474.1211 -36.8418 484.7822 -34.5273 486.4053 -33.3682 c488.0273 -32.208 485.9414 -29.4258 Yf0 D318.3599 358.2715 m314.8833 365.2266 306.5381 375.1924 306.5381 375.4248 C313.4917 377.7422 311.4063 382.3779 Y315.8101 384.6973 327.1675 398.6025 Y332.9624 380.0615 338.7568 374.498 339.4531 372.6436 c340.147 370.79 345.4795 349.4658 345.7104 347.1475 c345.9419 344.8291 346.1748 332.0801 Y342.6968 329.5313 341.77 329.2988 v340.8433 329.0664 337.1333 331.6182 Y337.1333 335.7891 335.7432 337.6426 v334.353 339.4971 333.1943 338.3398 Y321.8369 351.3174 318.3599 358.2715 vf*U*u1 D0.290196 0.745098 0.717647 0.192157 0.607843 0.313726 0.266667 Xa263.0723 302.9277 m261.8247 306.0459 258.7056 308.8535 Y257.6147 316.3379 254.3389 318.832 V254.4956 318.832 254.9634 328.5 250.1289 324.9131 C249.9741 324.6016 249.6616 326.9395 248.7261 329.1221 C246.855 331.9307 245.1396 329.2803 V244.9829 329.2803 242.645 327.0967 244.9829 321.9502 C244.5708 319.8428 L233.9409 341.6494 L236.2793 360.0488 236.9028 361.7646 v237.5273 363.4795 245.6353 371.1201 244.0757 382.0352 c242.5166 392.9502 223.1812 406.8281 218.3477 414.002 c213.5132 421.1738 212.8892 427.0996 212.8892 428.1914 c212.8892 429.2813 208.0845 433.0918 Y206.6641 437.0693 206.2373 438.3477 v205.8115 439.625 205.3848 452.2676 208.5107 454.541 c211.6353 456.8125 213.3403 456.5293 219.4478 456.2451 c222.146 456.1025 222.4302 461.501 221.7192 462.2109 c221.0103 462.9209 222.146 465.0508 223.4248 464.625 C224.2769 464.1992 225.1294 467.4658 222.8569 468.6016 C225.4131 469.3125 225.8394 470.5898 v226.2651 471.8691 224.4194 473.0059 224.8452 473.7168 c225.2715 474.4258 229.2485 476.2715 229.3896 477.5518 c229.5317 478.8301 228.2539 480.25 226.4077 481.6699 C225.8394 482.2383 222.8569 486.6416 223.4248 488.3457 c223.9927 490.0508 226.2651 496.4414 224.2769 502.4082 C224.1348 502.4082 229.5322 509.2256 224.7026 514.9072 C227.8276 517.3223 228.3965 508.0898 V228.5376 507.9473 230.8105 522.0098 222.4302 516.0439 C222.4302 515.9014 221.2935 517.0381 220.1572 516.1855 C220.2993 515.9014 208.2261 533.2305 184.9321 524.8516 c161.6372 516.4697 160.5005 498.1465 Y147.8589 496.584 155.1035 481.2441 V152.4043 476.6992 160.0747 478.4023 V160.2163 478.2607 166.4668 474.4258 168.4556 476.2715 C168.4556 475.9883 170.4443 472.4375 170.4443 470.1641 c170.4443 467.8926 174.9893 466.7559 176.2681 467.3242 c177.5459 467.8926 178.6816 467.4668 Y182.5171 457.3818 178.8237 446.5859 V178.6816 446.5859 175.4136 446.4424 175.6987 440.6191 C167.4609 431.1016 165.8975 419.0283 v164.335 406.9561 165.1875 395.165 171.4375 364.3418 c172.8579 357.2412 174.7031 340.3379 171.8628 310.9355 C171.7207 310.9355 166.4653 308.3789 162.4878 298.8623 C162.3462 298.8623 148.7095 279.1201 148.9927 265.0557 c149.2773 250.9941 156.6631 247.7285 157.2319 245.1709 c157.7998 242.6152 165.187 213.6377 166.3218 204.6895 C166.4648 204.2637 165.896 175.2842 165.7539 166.4795 c165.6118 157.6719 159.7163 135.0391 150.5947 108.374 c146.8521 96.2129 141.9404 -5.53516 145.2148 -20.5049 C145.4492 -22.6084 157.3784 -21.9072 Y155.9746 -27.9873 159.0151 -30.3271 V159.0151 -30.7959 157.5332 -30.4053 158.625 -33.2119 c158.937 -33.9922 163.6152 -34.7715 179.2075 -34.7715 C180.6118 -34.9277 180.6118 -33.2119 Y186.2246 -30.874 199.7915 -35.2393 V201.0386 -35.8623 216.0083 -37.1113 227.0796 -33.835 C227.8584 -33.6807 226.7676 -31.9639 Y240.957 -34.4609 256.394 -34.6143 V257.0186 -34.7715 256.8618 -32.7441 Y259.6699 -29.9385 256.0825 -26.9746 v252.4961 -24.0117 250.0015 -23.5439 Y235.811 -13.252 234.876 -13.7197 V232.8491 -12.6299 230.3545 -7.63965 V230.5098 -7.79395 233.1606 -7.9502 233.3164 -7.1709 c233.4731 -6.3916 213.7476 92.002 213.981 102.7607 c213.981 107.2051 221.2324 141.8213 220.2964 153.2822 c219.3604 164.7432 221.9336 194.4482 Y231.7578 222.2822 232.4595 239.124 v233.1606 255.9639 227.7813 276.3125 225.9102 286.6045 C225.9102 286.3701 225.6768 291.0488 224.7397 295.96 C224.7397 296.1953 230.7715 298.3848 230.7715 302.5938 c230.7715 306.8047 230.4263 309.4932 Y235.2563 305.0088 243.5801 300.2764 V243.8921 299.9648 243.5806 298.249 245.2959 295.9092 c247.0107 293.5723 248.8818 290.2959 Y246.855 286.8672 250.5972 286.5537 V250.9092 286.3994 251.377 285.3066 Y246.6992 282.0332 250.4419 280.6289 V250.4419 280.1611 249.6616 278.6006 Y245.1396 276.1064 247.791 273.7676 V247.9468 273.7676 248.4146 273.4561 250.4419 275.0146 C250.4419 274.8604 250.9092 272.8311 252.4688 272.9883 C252.7803 272.9883 255.5874 279.5371 255.7427 280.6289 C257.3022 280.4727 257.9263 282.3428 V258.2383 282.3428 260.7329 285.1504 260.8887 292.3232 C261.0444 292.3232 262.9165 294.0391 262.1362 297.9355 C262.292 297.7813 264.3193 299.8086 263.0723 302.9277 cf0 D225.1592 511.3594 m225.4453 507.502 223.4932 505.0273 Y223.0645 506.3604 223.0161 506.4551 V224.3027 507.7402 225.1592 511.3594 Yf*U*u1 D0.584314 0.278431 0.792157 0.082353 0.45098 0.560784 0.341176 Xa628.6387 138.4365 m624.1738 144.9766 614.6367 151.6777 610.1719 152.4766 c605.7051 153.2744 597.2266 157.5059 597.3867 157.5059 C600.5762 159.9004 596.2695 161.6553 595.1504 162.1348 c594.0352 162.6113 589.0898 168.3564 587.4941 168.834 c585.8984 169.3135 578.7207 173.1396 Y577.7637 174.8955 575.5313 176.9688 v573.2969 179.042 559.0996 191.4863 557.0254 192.6025 c554.9512 193.7188 548.8672 200.5186 538.1777 213.9189 c527.4902 227.3174 514.7266 237.8447 509.623 241.3525 c504.5176 244.8662 499.7305 250.9287 Y501.3262 252.6826 500.5293 254.2773 v499.7305 255.874 497.3379 261.7764 Y499.252 263.6895 498.2949 265.2861 v497.3379 266.8799 482.9805 286.3428 Y479.7891 299.4248 479.1504 303.8896 v478.5137 308.3594 481.3848 313.3037 479.7891 314.1006 c478.1953 314.8984 470.2173 323.9961 Y474.2358 331.1201 475.9624 332.2676 v477.6895 333.4189 478.8418 338.3535 478.416 340.5488 c477.9883 342.7412 479.4727 345.1426 480.7617 346.041 c485.8672 344.999 488.7305 341.9775 v491.5938 338.958 498.2207 340.6602 498.6914 340.752 c499.1621 340.8418 500.4219 342.7139 500.0371 346.375 c499.6484 350.0371 497.7715 355.5234 495.9395 358.2529 c495.2559 359.2725 494.8906 360.5293 y495.3867 361.9219 496.0586 362.6641 v497.127 363.8467 494.8535 365.5186 Y496.9961 368.6992 495.5605 369.3955 v495.4961 369.4258 495.4297 369.4697 495.3652 369.5098 C495.7715 369.8818 496.3516 370.5361 496.2676 371.252 c496.0781 372.8047 494.4414 372.7939 493.3652 373.1973 C493.3535 373.4014 493.3691 373.5781 493.4258 373.6914 c493.7754 374.4092 500.1973 374.9678 499.2754 378.5342 c498.752 380.5684 492.9531 384.4902 491.7363 385.7148 c490.5234 386.9434 487.1621 390.0273 Y488.4551 391.7402 488.125 394.2783 v487.793 396.8154 482.7656 404.2871 482.7051 404.6006 C481.1133 422.8193 456.7485 422.2441 443.4683 419.501 c430.186 416.7559 423.3677 410.8789 421.1997 397.7813 c419.0327 384.6836 425.9644 370.7568 428.606 367.207 c431.2456 363.6563 439.3022 354.0488 Y438.0366 350.8848 L430.9722 353.5049 426.5054 351.2725 v422.0396 349.0371 420.9214 343.2959 Y382.1665 312.417 391.5693 248.8525 390.9302 234.9727 c390.293 221.0947 396.0347 212.6377 396.1953 212.4795 C396.354 209.6104 400.5024 198.7598 400.6616 193.9717 c400.8223 189.1885 404.8101 190.624 Y404.1719 188.3887 407.0435 180.5713 406.8833 180.5713 C399.7046 162.2246 403.374 146.4336 Y400.3433 143.4014 401.7788 140.5293 v414.7017 112.9307 429.6978 110.8574 450.4351 110.5381 c471.1743 110.2207 506.2617 111.0313 Y525.7559 114.4297 535.9668 111.2393 v546.1758 108.0498 551.2813 108.8477 Y548.4102 105.1777 535.168 45.6738 535.168 45.5137 C527.6699 37.2188 527.0332 19.0322 Y524.002 17.4385 524.002 16.7988 v524.002 16.1621 526.5547 12.4922 Y524.959 -0.430664 524.8008 -0.270508 V522.8848 -1.86621 523.8438 -6.49219 523.8438 -6.65234 C521.4512 -7.12891 520.6523 -11.7578 521.6094 -12.5527 C527.8301 -17.0215 543.623 -20.6895 Y547.6133 -27.5508 550.4824 -30.1016 v553.3555 -32.6543 555.9082 -32.4941 557.6621 -32.1777 c559.418 -31.8574 561.4922 -28.9854 561.6523 -28.9854 C589.7285 -40.4727 608.0742 -32.0156 608.873 -29.625 c609.9902 -26.5928 608.3926 -25.1582 608.3926 -24.8369 C605.6797 -16.542 597.2246 -17.498 593.5566 -16.8633 c589.8867 -16.2236 586.8574 -13.8311 586.6973 -13.5107 C586.3789 -10.3193 582.8691 -8.72656 582.3887 -8.40527 C580.9531 -3.30078 577.6035 -2.82324 577.6035 -2.34375 C577.9238 1.96484 574.2539 2.44141 574.4141 2.59961 C574.8926 3.71777 573.7754 6.74805 Y575.3711 6.11133 575.5313 7.22852 v575.6895 8.3418 602.8496 56.5098 607.4766 64.8047 c612.1035 73.1006 626.7246 111.3164 628.6387 113.709 c630.5527 116.1016 633.1055 131.8955 628.6387 138.4365 cf/BBAccumRotation (0.191986) XT0 D530.8418 176.3467 m520.4727 179.6953 509.1426 179.9365 502.6016 182.6475 c496.0605 185.3594 486.4883 188.3916 Y485.6914 196.0479 485.5332 195.8896 V487.127 197.166 486.6484 203.5479 486.4883 203.708 C487.9238 203.8662 487.6055 209.6104 488.0859 211.0449 c488.5605 212.4795 484.2539 212.6406 484.4141 212.7998 C483.9375 215.1924 483.6172 225.8809 Y485.8496 222.5313 491.9121 218.0635 495.2637 214.875 c498.6133 211.6836 510.7383 199.4014 518.7129 195.7305 c550.6191 181.0537 548.5684 180.9561 549.0488 178.8828 c549.5254 176.8076 553.1953 171.3848 Y541.2109 172.9961 530.8418 176.3467 vf*U*u1 D0.658823 0.231373 0.337255 0.003922 0.356863 0.619608 0.647059 Xa1 XR549.5293 94.3574 m549.5293 98.3711 549.8574 103.1016 547.877 106.7627 c546.1582 109.9043 542.7754 108.9307 540.4277 110.6631 C537.0078 129.7266 536.082 153.0137 519.8145 165.8916 c503.875 178.5146 427.9429 173.9199 406.2251 173.8643 C404.8184 181.2676 403.1074 188.7275 400.3853 195.7705 c399.1108 199.0684 393.8374 205.3037 393.8691 208.5586 c393.9883 220.6318 391.4478 231.7695 387.7896 243.3379 c384.1387 254.8848 381.7383 268.0156 375.0352 278.293 c370.5986 285.1445 368.2681 289.6367 365.6089 280.6563 C364.7158 281.3037 363.771 281.3428 362.7764 280.7754 C363.0161 279.4395 363.2549 278.1064 363.4937 276.7686 c364.2275 272.667 370.8252 239.6318 373.4385 191.085 c374.8774 164.3555 377.0796 134.3418 393.4297 111.8877 c394.9922 109.7441 401.1235 91.3711 Y406.5151 88.9912 410.8931 88.4473 416.7427 88.4473 c449.3081 88.4473 481.875 89.0303 514.4395 89.041 C514.6035 87.7227 511.8301 85.041 515.1504 84.3486 c520.082 83.3203 520.4629 85.9082 520.873 79.8271 c521.0586 77.1299 521.209 74.4277 521.3301 71.7246 c521.8848 59.1064 521.5039 46.4863 520.8574 33.877 c520.3438 23.8281 522.043 -7.75586 516.7188 -16.625 c511.4336 -25.4385 495.2949 -25.8633 486.9121 -25.8633 c460.104 -25.8604 433.2944 -25.8633 406.4854 -25.8633 c398.2104 -25.8633 360.0542 -29.0693 364.4136 -31.9307 c368.0503 -34.3164 395.1641 -34.292 402.9604 -34.292 c416.4331 -34.291 429.9048 -34.291 443.3784 -34.292 c468.7563 -34.2939 495.3711 -35.7813 520.6855 -33.9707 c554.8066 -31.5264 545.6309 44.9424 545.3984 57.29 c545.2051 67.6289 542.7969 78.9277 543.6211 89.1621 C551.3457 89.8799 549.5293 88.6963 549.5293 94.3574 cf0 D409.7041 91.8916 m407.9023 92.1074 406.7935 92.4092 406.6992 92.8232 C407.5649 92.5498 408.4297 92.2705 409.2939 91.9961 c409.4282 91.957 409.5688 91.9287 409.7041 91.8916 C419.3994 90.7275 449.1782 92.0176 449.1196 91.2871 C436.8833 91.2871 421.5537 88.6025 409.7041 91.8916 Cf411.3042 115.2666 m412.3613 127.6436 410.3154 140.624 409.1812 152.9561 C409.4883 152.9561 407.6221 163.2539 407.7666 165.0029 C420.3325 165.0029 432.8989 164.8311 445.4653 164.7285 c449.9712 164.6914 478.127 161.5967 480.4121 165.0029 C482.2227 167.4307 500.1777 165.2656 503.3613 164.7803 c510.9746 163.6211 517.5 159.6563 521.9375 153.3418 c529.4746 142.6074 530.7207 124.2529 532.6309 111.6035 C524.9336 112.1455 446.2856 115.0205 411.3042 115.2666 Cf539.2852 5.82324 m538.3574 -3.39551 533.6426 -23.1553 522.9902 -25.8311 c511.5508 -28.708 517.3066 -28.498 522.1895 -19.6406 c526.6074 -11.6221 528.6973 63.2822 526.957 83.1377 C526.9277 83.8184 536.875 84.4111 537.3457 84.4072 C540.502 17.916 539.2852 5.82324 vf*U406.6992 92.8232 m406.7935 92.4092 407.9023 92.1074 409.7041 91.8916 C409.5688 91.9287 409.4282 91.957 409.2939 91.9961 c408.4297 92.2705 407.5649 92.5498 406.6992 92.8232 Cf*u1 D0.717647 0.580392 0.670588 0.580392 0.184314 0.215686 0.192157 Xa0 XR959.0908 551.5313 m984.2129 532.1348 992.7969 527.6826 v995.1826 526.4111 1000.9092 522.4355 1003.4502 522.4355 c1005.9971 522.4355 1013.4697 526.5693 1015.8516 533.7246 c1018.2354 540.8799 1015.2188 563.6152 1013.9453 570.1328 c1012.6709 576.6523 1010.127 601.1367 Y1010.9229 602.4102 1010.127 605.2715 v1009.333 608.1328 1004.8818 609.7227 Y1002.4971 614.0166 1001.8623 618.1494 v1001.2246 622.2842 998.5234 632.459 997.4102 634.3662 c996.2959 636.2754 993.4336 643.1123 990.8896 642.4766 C991.0488 642.4766 988.8213 647.2461 987.8691 647.7227 c986.9141 648.1992 984.5322 647.2461 Y983.7334 649.3125 981.8271 649.3125 v979.9209 649.3125 978.3301 647.2451 976.8994 646.1328 c975.4688 645.0195 973.0811 643.4297 Y968.9502 643.2705 968.79 641.2031 v968.6318 639.1367 969.7461 632.2988 971.0156 632.6182 c972.2881 632.9355 973.5566 633.7305 973.5566 638.0234 C974.6738 638.501 L977.377 634.207 L978.1699 628.9609 979.4453 627.5303 V979.7588 624.3496 978.9678 623.7129 v978.1699 623.0762 975.9463 625.4629 Y977.8525 628.4844 976.4238 629.916 V975.627 630.3906 969.7461 627.2129 969.1094 625.7813 c968.4736 624.3496 969.5859 622.4414 971.1758 620.6934 c972.7637 618.9434 978.6465 609.4043 982.1436 607.9746 c985.6436 606.5449 989.6201 605.4297 Y986.6016 604.9551 986.7588 603.8398 v986.9141 602.7266 986.6016 599.5479 987.3936 598.2754 C987.5527 598.2754 988.3447 573.1543 Y971.4941 595.7324 961.9551 601.457 v952.4131 607.1807 947.8047 607.4961 939.5361 607.1807 c931.2676 606.8613 919.0264 608.292 Y917.0986 611.2598 913.0537 609.6172 V911.1143 617.0957 910.8369 620.834 V913.1924 623.1904 912.6387 630.9453 V912.6387 631.085 914.7129 630.668 915.4092 633.9922 c916.1006 637.3164 916.2373 645.3477 915.6865 647.5654 c915.1309 649.7744 913.2031 652.1191 911.542 648.5625 C911.6592 649.2363 911.4375 662.3047 908.8994 667.6465 c906.2676 673.1865 895.8818 681.4971 885.0791 681.2197 c874.2725 680.9414 861.8105 666.5381 862.5029 657.6748 c863.1934 648.8115 864.8584 643.6855 Y861.5313 643.8252 861.2598 639.9463 v861.1172 637.7324 863.1934 632.8848 863.4736 630.3906 c863.7471 627.8994 868.0439 625.1279 868.7334 624.9902 c869.4307 624.8525 870.6758 625.5449 Y872.7529 617.9277 872.8916 615.5732 v873.0322 613.2188 874.8291 606.0156 Y870.2568 606.4316 867.4902 602.1387 V867.3486 602.1387 846.7139 594.1055 842.5605 590.9199 c838.4043 587.7354 822.8916 580.8105 828.0166 562.1123 c833.1426 543.416 848.376 526.6582 Y854.1914 511.0098 855.9941 502.4199 v857.793 493.834 863.7471 477.4932 863.333 472.6455 c862.9209 467.7979 856.4092 444.6689 857.5186 431.7891 C857.6533 431.6504 855.4404 429.7109 858.208 425.6943 C858.3467 425.6943 856.3037 402.4746 855.3525 388.4043 c854.3945 374.334 853.2041 337.8467 849.624 316.1416 c847.2422 299.4492 850.1025 282.7568 Y845.0918 269.1631 845.0918 240.5439 v845.0918 211.9248 847.957 186.8809 Y846.5244 168.9951 850.3418 156.3564 V847.2422 146.8174 850.8203 139.4248 v851.5303 137.9922 856.0615 137.75 Y855.5859 135.1309 855.9023 132.1094 V855.748 132.2676 855.2725 126.9238 855.2725 124.3848 c855.2725 121.834 854.4736 119.6094 857.1768 116.75 c859.8789 113.8887 861.3105 112.6162 861.9502 112.6162 c862.585 112.6162 863.5371 112.457 Y864.3311 110.4854 867.3545 109.373 v870.373 108.2598 898.6738 106.5117 908.8496 107.9443 C910.5986 108.1016 910.5996 112.8701 909.3262 113.0313 C909.4854 113.0313 910.4404 118.1201 909.167 120.3408 c907.8994 122.5703 901.5381 125.748 Y897.7217 130.042 896.6094 133.3799 v895.4941 136.7188 892.6338 140.8535 Y898.3574 140.0605 899.1494 140.5352 v899.9463 141.0107 902.0117 142.4443 900.5811 145.1445 C901.8555 155.7988 899.7891 163.2725 V899.7891 163.1133 900.7432 168.3613 899.627 192.0498 c898.5166 215.7402 897.2451 238.3154 896.1279 251.1953 c895.0176 264.0713 898.834 286.9688 900.4258 290.625 c902.0117 294.2842 913.46 352.1553 Y916.166 343.8867 916.7988 336.2559 v917.4365 328.625 922.8408 295.8701 926.6563 284.583 c930.4756 273.2939 935.4033 254.3721 Y933.6533 226.2314 936.6748 211.2891 v939.6943 196.3408 943.8291 176.3076 943.8291 171.6973 c943.8291 167.0889 946.1758 151.1367 Y944.541 141.8047 945.6514 140.2168 v946.7705 138.627 950.377 138.1523 Y947.6768 127.9775 948.1523 124.7949 V947.0391 124.4775 945.9277 121.1396 v944.8125 117.7998 944.3369 115.7314 945.1309 114.7783 c945.9277 113.8252 956.707 109.5342 957.6602 109.3721 c958.6152 109.2119 960.6797 108.8975 Y964.4941 106.5117 969.5859 105.5586 v974.6738 104.6025 1005.5186 99.5156 1011.4014 106.0361 C1012.1953 107.1465 1011.7197 110.4854 1010.9229 110.6445 C1011.085 110.4854 1011.5605 117.6396 1005.8369 120.8203 c1000.1104 123.998 988.665 126.0664 986.6016 131.1553 C991.3662 131.3145 992.7969 137.6738 v994.2295 144.0322 993.1143 155.3223 993.5938 158.8203 c994.0732 162.3164 989.6201 202.7041 988.0303 208.1055 C982.9414 256.4414 976.583 274.5664 V976.7402 274.4072 975.4688 317.3369 974.0361 327.1924 c972.6064 337.0508 967.3584 399.6934 961.1611 421.6348 C963.2266 422.1113 962.4307 425.7695 V962.4307 425.9287 967.3584 422.1113 968.9502 421.9521 C969.1094 421.9521 972.2881 417.1816 973.2432 417.0254 c974.1953 416.8633 976.583 417.0254 Y980.2354 413.8457 981.5107 413.8457 v982.7803 413.8457 991.5283 414.002 992.3213 414.6377 c993.1143 415.2754 998.2041 417.6602 999 418.7715 c999.793 419.8848 1004.5654 424.1797 1002.6543 424.8164 C1002.6543 424.6553 1002.1777 428.7871 995.3428 426.8818 C995.3428 426.5635 990.7295 427.9941 988.1885 427.9941 C985.0078 430.2197 981.9883 431.1738 V981.9883 431.0146 977.0576 435.4678 975.4688 436.8984 C974.9922 437.6934 975.627 442.7793 978.0127 442.7793 c980.3975 442.7793 982.9414 441.3496 985.167 441.3496 c987.3916 441.3496 991.0518 441.0332 991.3662 442.9395 c991.6826 444.8477 988.665 446.4365 986.7588 447.5518 c984.8506 448.6631 982.3037 449.459 980.2354 449.459 c978.1699 449.459 974.0361 450.0938 971.0156 451.3652 c967.9951 452.6387 958.1406 451.5254 Y952.5732 476.9648 952.5732 485.3926 v952.5732 493.8174 953.5264 525.457 956.2295 531.9766 c958.9336 538.4941 959.0908 551.5313 Yf0 D988.1885 422.1113 m992.6396 421.6348 993.7529 421.1582 V990.2432 421.4473 987.9893 420.9092 V987.8926 420.832 987.7949 420.8008 987.709 420.8389 C987.8018 420.8652 987.8975 420.8867 987.9893 420.9092 C988.2793 421.1367 988.5449 421.7578 988.1885 422.1113 Cf*U0.196078 0.396078 0.745098 0.011765 0.803922 0.607843 0.352941 Xa1120.9502 537.7832 m1121.5391 540.0977 1121.9102 542.6113 1122.0088 545.2607 C1122.0869 547.2852 1121.999 549.2754 1121.7725 551.2012 C1122.5723 553.0117 1123.0537 555.043 1123.1367 557.2314 C1123.2412 560.0547 1122.6777 562.8057 1121.5996 565.3125 C1122.1787 567.6201 1122.543 570.1191 1122.6436 572.7559 C1122.7764 576.1982 1122.4443 579.5352 1121.7393 582.6211 C1122.6064 583.791 1123.1133 585.1426 1123.1699 586.6318 C1123.2334 588.2451 1122.7588 589.8457 1121.8652 591.3447 C1122.5654 593.7461 1122.998 596.3867 1123.1055 599.1953 C1123.2305 602.4395 1122.9014 605.5869 1122.2041 608.4951 C1123.499 609.7256 1124.3965 611.8945 1124.4922 614.4736 C1124.6533 618.7266 1122.5908 622.4658 1119.8906 622.8223 C1118.9648 622.9434 1118.0889 622.6475 1117.3291 622.0449 C1116.6943 622.8506 1116.0098 623.334 1115.2783 623.4336 C1114.5742 623.5264 1113.8799 623.2539 1113.2139 622.666 C1111.8154 623.5264 1110.3105 624.0918 1108.7393 624.2969 C1106.7178 624.5654 1104.7686 624.2148 1102.9648 623.3613 C1101.8027 624.4824 1100.5244 625.1855 1099.165 625.3672 C1098.7139 625.4248 1098.2744 625.4189 1097.835 625.3652 C1096.7471 626.3945 1095.5303 627.0439 1094.2412 627.2148 C1092.9141 627.3926 1091.6318 627.041 1090.46 626.2686 C1089.4307 626.6973 1088.3652 626.9951 1087.2705 627.1396 C1085.002 627.4395 1082.8232 627.0664 1080.8262 626.1426 C1080.0205 627.4395 1079.1084 628.2188 1078.124 628.3496 C1077.0322 628.4961 1075.9707 627.8223 1074.998 626.502 C1072.9951 628.2178 1070.7246 629.3301 1068.2979 629.6504 C1066.5479 629.8828 1064.8535 629.6787 1063.2578 629.1123 C1062.4824 629.9941 1061.6318 630.5332 1060.7324 630.6523 C1059.5762 630.8066 1058.4541 630.2441 1057.418 629.1191 C1055.2764 630.668 1052.8838 631.6924 1050.3408 632.0293 C1050.2744 632.04 1050.21 632.042 1050.1445 632.0469 C1050.0801 632.0586 1050.0156 632.0742 1049.9541 632.082 C1047.4141 632.416 1044.9795 632.0332 1042.7627 631.0684 C1041.8193 632.4492 1040.7568 633.2988 1039.6084 633.4492 C1038.7227 633.5684 1037.8535 633.2578 1037.0303 632.5938 C1035.5068 633.5684 1033.8682 634.2109 1032.1475 634.4385 C1029.7646 634.7539 1027.4834 634.252 1025.4189 633.0908 C1024.5703 634.6377 1023.5967 635.5684 1022.5313 635.7109 C1021.5791 635.8389 1020.6426 635.3096 1019.7744 634.25 C1017.9189 635.6699 1015.8535 636.5957 1013.666 636.8867 C1012.6055 637.0254 1011.5635 637.0088 1010.5527 636.8516 C1009.4902 637.9063 1008.2939 638.5723 1007.0176 638.7422 C1005.7793 638.9063 1004.583 638.5859 1003.4844 637.8662 C1003.0723 638.0293 1002.6563 638.1475 1002.2256 638.2051 C1000.9277 638.375 999.6689 638.0225 998.4922 637.2363 C996.8506 638.5195 995.0479 639.3516 993.1279 639.6035 C991.6426 639.8008 990.2031 639.6377 988.835 639.1631 C988.2471 639.8965 987.6221 640.333 986.96 640.4199 C986.2734 640.5098 985.6006 640.2188 984.9551 639.6045 C984.2861 640.375 983.4912 640.8779 982.626 640.9932 C980.1016 641.3281 977.9355 638.2686 977.792 634.1602 C977.7031 631.666 978.3848 629.3613 979.4971 627.8555 C978.6523 625.248 978.1309 622.3193 978.0225 619.1846 C977.9316 616.4707 978.1445 613.8301 978.6328 611.3457 C977.7031 610.1484 977.1553 608.7422 977.1006 607.1855 C977.0479 605.7471 977.4258 604.3174 978.1465 602.9678 C977.2822 600.2041 976.749 597.1016 976.6309 593.7754 C976.542 591.2246 976.709 588.7402 977.085 586.3711 C975.917 584.2715 975.2061 581.7949 975.1123 579.0703 C975.0352 576.9551 975.3408 574.8809 975.9531 572.9258 C975.6104 571.1504 975.3955 569.2725 975.332 567.3164 C975.2383 564.7539 975.4082 562.25 975.792 559.8662 C974.8604 557.918 974.2939 555.6855 974.209 553.2559 C974.0977 550.1934 974.7656 547.2129 975.999 544.5498 C974.9717 542.1357 974.3525 539.3457 974.2432 536.3086 C974.2334 536.0527 974.2305 535.7949 974.2305 535.5381 C974.2158 535.2813 974.1982 535.0283 974.1885 534.7686 C974.082 531.7354 974.5068 528.7773 975.3525 526.0703 C973.9453 523.8281 973.0859 521.0928 972.9746 518.0352 C972.8887 515.6074 973.2949 513.2246 974.084 511.0098 C973.5361 508.7764 973.1943 506.3594 973.1035 503.8008 C973.0361 501.8516 973.1211 499.9297 973.335 498.0732 C972.5928 496.3379 972.1533 494.3857 972.0752 492.2773 C971.9805 489.5625 972.5078 486.9023 973.5156 484.4648 C972.9814 482.2539 972.6445 479.8555 972.5566 477.3164 C972.4355 474.0059 972.749 470.7852 973.4082 467.7949 C972.6094 466.6934 972.1387 465.4033 972.0889 463.9727 C972.0322 462.4248 972.4785 460.8711 973.3066 459.4023 C972.6592 457.1113 972.2637 454.585 972.165 451.8867 C972.0586 448.7734 972.3662 445.7344 973.0166 442.9082 C971.8223 441.7803 970.9863 439.7266 970.9033 437.252 C970.7578 433.1758 972.6797 429.498 975.1895 429.0352 C976.0508 428.8789 976.8652 429.127 977.5781 429.6719 C978.1729 428.8672 978.8145 428.3711 979.499 428.2461 C980.1621 428.126 980.8057 428.3564 981.4316 428.8926 C982.748 428.001 984.1533 427.3887 985.6338 427.1191 C987.5459 426.7676 989.3779 427.0176 991.0791 427.7676 C992.1855 426.625 993.3975 425.8848 994.6865 425.6494 C995.1123 425.5723 995.5361 425.5547 995.9502 425.5879 C996.9873 424.5391 998.1396 423.8496 999.3721 423.623 C1000.6436 423.3906 1001.8623 423.6699 1002.9873 424.3701 C1003.9707 423.9043 1004.9932 423.5635 1006.0459 423.3701 C1008.2217 422.9707 1010.3154 423.2305 1012.248 424.0449 C1013.0283 422.7344 1013.9072 421.9258 1014.8594 421.749 C1015.917 421.5566 1016.9473 422.165 1017.8877 423.416 C1019.8359 421.6348 1022.0459 420.4297 1024.4141 419.9961 C1026.1318 419.6807 1027.792 419.7998 1029.3584 420.2793 C1030.1221 419.3701 1030.9551 418.7949 1031.8408 418.6357 C1032.9775 418.4219 1034.085 418.9219 1035.1113 419.9844 C1037.2217 418.3438 1039.5928 417.209 1042.1211 416.7451 C1042.1846 416.7314 1042.248 416.7266 1042.3105 416.7168 C1042.376 416.7051 1042.4385 416.6865 1042.5049 416.6738 C1045.0342 416.209 1047.46 416.4658 1049.6768 417.3145 C1050.6201 415.8877 1051.6865 414.9883 1052.832 414.7773 C1053.7256 414.6152 1054.5996 414.877 1055.4307 415.5 C1056.9619 414.4414 1058.6123 413.7129 1060.3574 413.3965 C1062.7656 412.9531 1065.0869 413.335 1067.1777 414.3906 C1068.042 412.791 1069.0371 411.8008 1070.123 411.6035 C1071.1016 411.4238 1072.0518 411.9033 1072.9443 412.9238 C1074.8418 411.3926 1076.9609 410.3457 1079.21 409.9336 C1080.3047 409.7334 1081.376 409.6914 1082.4141 409.791 C1083.5156 408.6689 1084.751 407.9248 1086.0693 407.6816 C1087.3525 407.4453 1088.5947 407.7031 1089.7393 408.3721 C1090.167 408.1816 1090.6006 408.0381 1091.0498 407.9561 C1092.3994 407.707 1093.71 407.998 1094.9404 408.7305 C1096.6504 407.332 1098.5391 406.3828 1100.5479 406.0127 C1102.1113 405.7266 1103.6309 405.8096 1105.0801 406.2148 C1105.6885 405.4316 1106.3467 404.9512 1107.0479 404.8184 C1107.7744 404.6865 1108.4893 404.9492 1109.1738 405.541 C1109.8779 404.7109 1110.7168 404.1475 1111.6357 403.9785 C1114.3213 403.4854 1116.626 406.5039 1116.7881 410.7207 C1116.8799 413.2813 1116.1611 415.6895 1114.9814 417.2969 C1115.8848 419.9336 1116.4404 422.9219 1116.5635 426.1445 C1116.667 428.9326 1116.4365 431.6602 1115.9287 434.2402 C1116.9189 435.4326 1117.5068 436.8574 1117.5674 438.457 C1117.627 439.9395 1117.2217 441.4258 1116.46 442.8477 C1117.3838 445.6602 1117.9619 448.8398 1118.0898 452.2646 C1118.1885 454.8916 1118.0186 457.4619 1117.6143 459.9141 C1118.8652 462.043 1119.6299 464.5771 1119.7363 467.3887 C1119.8184 469.5693 1119.4971 471.7207 1118.8477 473.7549 C1119.2148 475.584 1119.4463 477.5156 1119.5273 479.5342 C1119.6289 482.1797 1119.4443 484.7715 1119.042 487.2402 C1120.042 489.2344 1120.6514 491.5352 1120.7471 494.0508 C1120.8643 497.2129 1120.1631 500.3066 1118.8389 503.0703 C1119.9434 505.5566 1120.6162 508.4395 1120.7334 511.5801 C1120.7451 511.8477 1120.75 512.1123 1120.751 512.3789 C1120.7686 512.6445 1120.7861 512.9063 1120.7979 513.1758 C1120.9141 516.3154 1120.4648 519.375 1119.5615 522.1816 C1121.0742 524.501 1122.0039 527.3379 1122.123 530.5059 C1122.2207 533.0254 1121.792 535.4912 1120.9502 537.7832 Cf0.584314 0.278431 0.792157 0.082353 0.45098 0.560784 0.341176 Xa1215.0732 612.4541 m1212.1875 616.4043 1212.1875 617.4658 v1212.1875 618.5293 1211.2744 623.2363 1212.3389 625.5156 C1214.4668 627.0342 1214.9209 634.3242 V1214.7695 634.3242 1220.3877 643.5859 1214.9209 650.1162 C1214.7695 650.1162 1215.0732 664.2383 1208.8457 671.2266 c1202.6201 678.2129 1187.1299 683.375 1171.7939 675.4785 C1162.3779 670.6182 1159.7959 662.2656 1158.8838 657.1035 c1157.9707 651.9395 1156.6045 645.8643 1157.2129 644.6504 c1157.8223 643.4355 1158.7334 639.3359 1158.5791 637.9678 c1158.4277 636.6016 1157.5186 629.7666 1160.8584 623.6934 C1161.9209 621.415 1163.5908 616.252 1164.3516 613.5195 c1165.1104 610.7852 1166.7783 604.2539 1169.5156 603.6475 c1172.2461 603.0391 1176.8057 603.7969 y1177.8643 601.3682 1177.7139 599.8496 v1177.5645 598.332 1178.7793 596.5098 1179.9912 595.751 C1180.4043 595.583 1181.2061 594.3818 y1173.1602 589.3721 1170.8799 588.6133 V1169.2109 587.8535 1167.6914 586.0293 1166.7813 581.1719 C1166.4775 580.1094 1161.0107 572.0596 1161.0107 567.5039 C1160.8584 567.1992 1151.7451 562.7959 1150.2275 524.9824 C1150.0771 524.9824 1144.4541 531.5137 1144.001 534.0938 c1143.5479 536.6748 1141.5723 540.168 1138.2285 541.9912 C1138.0781 541.9912 1136.8613 547.915 1130.0313 545.1797 C1130.0313 545.332 1120.7637 547.7617 1117.8809 549.4316 C1117.123 550.04 1110.1348 548.5205 1109.0703 548.0645 c1108.0117 547.6094 1106.6416 544.1172 1107.4014 543.2051 c1108.1611 542.2949 1109.375 541.5361 y1106.7949 539.4102 1107.5547 536.9785 V1108.0117 535.7656 1109.2246 535.46 y1106.6416 532.8779 1107.5547 531.208 v1108.4668 529.5381 1110.8945 527.5654 y1109.0723 525.5898 1110.2871 523.7676 v1111.502 521.9453 1113.1719 521.793 1114.2373 521.3379 c1115.3008 520.8818 1123.6533 519.0615 1129.4219 519.666 C1135.7979 510.0996 1136.8613 506.1523 v1137.9258 502.2031 1140.6572 493.8516 1144.001 487.7764 C1144.3037 487.7764 1143.3916 478.6641 1142.3301 477.6006 c1141.2695 476.5371 1141.7236 472.1992 1144.001 470.376 C1144.1523 470.376 1140.5088 470.8809 1133.2207 458.125 C1131.8525 455.543 1122.4355 442.9395 1118.4912 440.5098 c1114.541 438.0791 1110.2891 435.4971 1108.3145 433.6748 c1106.3398 431.8525 1100.8711 427.5996 1100.5703 425.3242 c1100.2646 423.043 1099.9619 416.8184 1100.1123 415.4512 c1100.2646 414.084 1099.2002 410.2871 1100.416 409.832 C1100.5703 409.6797 1099.3545 407.251 y1096.7705 405.5801 1096.0117 404.3652 V1093.2793 403.6055 1093.583 401.3281 V1093.8848 400.1133 1096.4678 398.5947 1097.834 398.5947 c1099.2002 398.5947 1101.6309 400.7197 y1104.0596 398.8975 1105.4268 398.8975 v1106.7949 398.8975 1108.7695 400.7197 y1110.8975 398.1377 1112.1123 398.1377 v1113.3262 398.1377 1115.7549 400.2637 y1119.3994 399.2012 1120.3135 399.8086 v1121.2246 400.416 1124.7139 406.4922 1125.7783 409.5293 c1126.8418 412.5664 1131.5479 423.9561 1131.0928 427.1436 C1130.9385 427.1436 1133.8271 429.4229 1135.3447 431.2461 c1136.8633 433.0674 1146.7373 437.2705 1149.0137 438.334 C1149.166 438.1816 1148.709 416.8555 1149.9238 408.0469 C1149.9238 408.2002 1146.8838 394.5322 1147.6465 387.3936 C1147.6465 387.0908 1145.9775 387.2422 1145.5195 379.498 c1145.0635 371.752 1141.8848 306.9424 1142.168 287.5547 C1142.168 284.1348 1135.0439 187.4912 1136.4697 177.7998 C1136.7539 177.7998 1133.0488 174.3799 1136.1826 165.2568 C1136.1826 164.9688 1130.623 148.4688 1131.9053 146.1895 C1131.7627 146.333 1127.915 144.4795 1126.3457 141.9121 C1123.0732 140.2324 1121.3633 136.8125 V1115.3975 135.1494 1114.8271 132.7266 V1114.9678 132.7266 1110.8984 129.9033 1108.9033 129.0488 c1106.9072 128.1924 1095.0371 122.4326 1094.6084 115.1611 C1094.75 115.1611 1093.5713 113.1162 1095.4238 111.6914 c1097.2764 110.2656 1115.2275 107.2295 1128.7695 109.7969 C1134.3301 111.0781 1146.5889 113.2178 y1147.2451 110.2793 1148.5264 109.8516 v1149.8076 109.4219 1170.5273 111.4678 1171.8105 111.8936 c1173.0947 112.3213 1174.8086 119.2461 1173.2412 119.2461 C1173.0977 119.1055 1174.8135 125.8027 1174.3848 127.5156 C1174.2422 127.375 1175.5225 128.082 1176.2354 133.5039 c1176.9492 138.917 1184.3623 179.6504 1179.8018 181.3604 C1179.6563 181.2197 1188.0713 216.2852 1188.2109 241.376 C1188.2109 248.0752 1187.2139 249.9229 y1191.6328 259.0488 1189.7764 263.1826 V1189.7764 263.042 1191.2031 271.877 y1192.627 248.9258 1194.3398 245.7891 V1194.627 245.5049 1197.1924 191.9121 1205.8848 158.9824 C1206.3154 157.127 1203.3203 150.7158 1206.6006 144.3008 C1206.4561 144.1592 1199.6143 137.8848 y1197.333 138.0283 1197.9043 136.0342 V1193.7705 135.75 1191.6328 131.7568 V1191.6328 131.6133 1188.7783 128.7617 1185.0752 127.0508 c1181.3682 125.3408 1179.2295 123.4902 y1167.9697 120.4951 1168.2539 114.6553 V1168.2539 114.2246 1166.2598 112.2266 1168.9697 110.8008 c1171.6768 109.375 1183.9346 106.5273 1194.7686 105.9551 c1205.6016 105.3887 1221.5664 107.2422 1226.415 109.8066 C1226.415 109.5225 1228.4092 108.9502 1229.1221 108.9502 c1229.834 108.9502 1243.9434 110.5166 1246.085 111.0869 c1248.2207 111.6602 1247.0801 117.0752 1245.5137 117.5029 C1245.6563 117.2168 1246.2275 121.2051 y1247.6514 121.3516 1249.2207 129.6182 v1250.7881 137.8848 1251.2178 168.5332 1247.3643 175.8018 C1249.0811 200.6074 1246.7969 216.4287 v1244.5146 232.248 1245.6563 240.6592 1241.3818 246.0771 C1241.2373 249.7852 1242.6631 252.918 v1244.0879 256.0537 1242.8076 260.0488 1241.5205 261.043 C1241.3818 260.9014 1243.2334 264.4639 1241.9502 268.0293 c1240.668 271.5918 1240.9531 275.4404 y1243.0918 278.1484 1241.2373 287.9824 V1240.668 290.6943 1240.5234 302.3838 1239.2402 322.0547 c1237.959 341.7275 1235.5361 372.5137 1236.1074 377.5029 c1236.6758 382.4912 1243.374 389.9023 1242.2354 403.3027 C1242.0938 403.3027 1243.2334 403.1611 1243.0918 406.4395 c1242.9482 409.7197 1239.957 423.9727 1234.8242 438.9395 C1234.5391 440.3652 1231.9707 439.6514 y1222.708 456.1875 1220.4248 457.3281 V1220.2852 457.1855 1221.1387 463.1719 1220.1416 464.8828 C1220.2852 464.7383 1225.1289 462.8867 1224.417 471.0137 C1224.417 471.1543 1231.5469 485.6934 1231.5469 492.3936 c1231.5469 499.0938 1232.9707 514.6309 1236.1074 537.1523 c1239.2402 559.6738 1241.3818 575.7813 1225.9854 596.5918 C1225.7012 596.5918 1228.252 612.0664 1215.0732 612.4541 cf0.647059 0.294118 0.180392 0 0.368627 0.596078 0.717647 Xa945.7402 465.6973 m939.4531 454.6895 L936.7041 449.8789 938.375 443.7471 943.1895 440.998 c948 438.248 954.1318 439.9219 956.8828 444.7334 C957.9297 446.5684 L997.3701 424.0332 L999.3984 422.875 1001.9785 423.5791 1003.1357 425.6074 c1004.2959 427.6328 1003.5889 430.2148 1001.5635 431.3721 C962.1211 453.9053 L963.1709 455.7402 L965.9189 460.5527 964.248 466.6836 959.4355 469.4336 c954.6221 472.1816 948.4902 470.5098 945.7402 465.6973 Cf/BBAccumRotation (1.051724) XT*u1 D0.290196 0.745098 0.717647 0.192157 0.607843 0.313726 0.266667 Xa1103.8125 160.4424 m1102.6309 185.4219 1100.2715 263.1104 1097.3203 269.7959 C1097.5195 277.4648 1095.5508 283.5625 V1094.5693 363.0205 1094.7666 368.5273 V1103.2217 369.3145 1103.8125 370.2979 v1104.4033 371.2803 1094.3721 438.5439 1093.7813 459.3926 C1093.9785 463.915 1093.5576 493.2197 1091.9844 504.4297 C1097.5469 534.7188 1096.959 540.0283 V1096.959 540.2266 1100.3008 547.3057 1097.3486 552.4199 C1097.5469 552.2227 1098.333 582.2236 1090.2705 593.0469 c1083.7188 601.8359 1079.0303 604.6504 1073.7197 604.6504 c1068.4082 604.6504 1067.3135 606.8145 Y1067.8408 607.5723 1067.1523 608.1973 v1066.4668 608.8223 1060.4775 616.1738 1059.3516 617.2979 c1058.2285 618.4219 1056.6494 618.4805 1054.877 617.4297 C1054.0098 619.5361 1052.8936 619.041 v1051.7773 618.5449 1050.6709 618.7314 Y1050.0664 623.1582 1049.9414 625.1816 v1049.8125 627.2051 1050.9531 629.1035 1051.2051 632.2656 c1051.457 635.4287 1056.3916 638.4648 1054.4912 655.1602 c1052.5957 671.8574 1048.2969 683.1162 1036.4053 683.874 C1036.4053 684.127 1021.0996 691.085 1007.5635 684.5078 c994.0303 677.9287 991.8789 668.5684 991.8789 665.5322 C992.8906 666.6719 992.8906 667.4307 993.7764 667.9355 C993.7764 667.8086 990.8701 656.2988 990.8701 654.6543 c990.8701 653.0107 989.7305 651.6182 990.7412 649.7207 c991.7549 647.8242 992.7656 647.4453 992.8906 646.6855 c993.0176 645.9277 991.1211 640.7402 990.2344 638.8438 c989.3486 636.9453 987.2012 634.0371 987.2012 632.6465 c987.2012 631.2539 987.96 630.1152 990.3623 629.7344 c992.7656 629.3574 993.7764 628.7246 993.9033 628.2168 c994.0303 627.7129 993.6514 624.9287 993.1455 624.0439 c992.6406 623.1582 993.3994 621.5146 995.1689 621.0088 C995.042 620.8809 993.7764 619.1094 995.1689 618.2246 c995.9287 617.7188 997.3203 617.4658 996.8135 615.9482 c996.3066 614.4297 995.1689 609.3701 999.2178 607.3477 c1003.2666 605.3242 1015.0293 608.8652 1016.4209 608.1035 c1017.8105 607.3477 1016.6455 602.1621 1018.2881 601.0225 C1018.417 601.0225 1014.5918 600.7686 1014.4668 595.2041 c1014.4668 595.0781 994.2061 592.0078 989.8652 569.0645 C989.8652 568.9404 982.4219 553.4395 978.208 546.7432 c973.9932 540.0469 962.9971 524.3047 963.5986 520.9375 C963.8398 520.6973 947.6484 525.8398 936.8242 527.5225 c925.998 529.207 903.0801 538.1699 901.7598 538.6514 c900.4375 539.1328 899.2412 537.6016 Y896.9639 539.2578 895.8799 536.9727 V892.0518 539.3145 890.7305 540.6387 v889.4063 541.9609 888.5635 543.2842 883.9941 543.043 C884.1143 543.043 877.6201 545.6895 875.4521 546.291 c873.2881 546.8936 869.0781 548.9385 866.5508 549.5391 c864.0254 550.1416 860.5371 551.4629 858.6133 551.7051 c856.6865 551.9453 853.4404 551.9453 853.4404 550.2607 c853.4404 548.5771 855.6055 547.0137 858.7324 546.1699 C859.5752 546.0508 863.1826 544.4873 864.1445 544.126 c865.1084 543.7656 869.0781 541.7207 870.04 541.4805 C869.9209 541.2402 867.9678 540.543 870.2529 537.416 C870.374 537.0566 867.2461 536.5742 866.6426 535.9727 c866.043 535.3711 866.043 533.207 866.1631 532.3652 c866.2852 531.5215 867.2461 530.8008 Y865.8018 529.8389 865.8018 528.7559 v865.8018 527.6729 865.9219 526.3496 866.8857 525.6289 c867.8486 524.9063 869.1709 524.5469 Y867.7285 523.8242 867.8486 522.3809 v867.9678 520.9375 869.1689 519.0127 872.8994 518.291 C873.0195 518.0498 882.5225 514.6816 887.335 514.4414 C887.4551 514.3223 886.9756 512.1563 886.9756 511.6738 c886.9756 511.1924 889.8633 509.6289 Y888.415 504.0977 889.7373 503.373 v891.0645 502.6523 926.1885 490.7461 935.3291 487.9775 c944.4746 485.2109 964.0811 480.6406 967.4492 481.6016 c970.8154 482.5645 987.3857 488.582 996.5615 500.8594 C996.5615 500.7354 997.2236 476.9883 999.209 467.9355 C999.209 467.8115 990.6084 463.0352 989.7393 462.6641 c988.8721 462.29 988.624 460.0596 Y986.3896 458.8184 985.8955 458.4473 v985.4023 458.0742 984.7793 456.5879 Y976.8438 452.3701 975.2314 451.875 v973.6191 451.3789 972.1318 450.2617 971.1377 448.4014 c970.1475 446.541 966.9238 440.5889 966.7988 438.3574 c966.6748 436.125 968.2861 434.5137 969.0313 434.2637 c969.7725 434.0156 972.2559 434.6377 Y973.8691 431.6602 975.2314 431.4121 v976.5957 431.1641 979.0771 432.1563 Y979.4482 430.1719 982.6709 429.7988 V982.4219 429.6758 983.6631 427.5684 986.7646 429.3047 C986.7646 429.1797 990.2344 428.6846 992.2197 429.6758 c994.2061 430.668 997.001 432.5947 Y994.8027 403.5898 993.8096 396.2734 v992.8174 388.957 991.7217 382.4688 991.8486 376.6396 c991.9688 370.8125 986.2676 364.9434 1003.0088 366.3057 C1003.1338 366.0586 1001.54 354.9551 1005.0811 347.876 C1005.2764 347.6787 1002.917 331.7471 1003.7061 321.127 c1004.4893 310.5068 1005.2764 284.9414 1007.6367 275.3018 C1006.8516 258.9775 1009.0137 249.1455 V1009.8018 246.3896 1009.6055 188.9609 1008.4229 180.7012 c1007.2451 172.4385 1004.2959 164.5742 1009.6055 160.2471 C1009.6055 159.8535 1005.6699 148.6709 1006.4561 141.001 C1006.6533 140.4102 1003.375 136.7402 1001.2793 134.3779 c999.1816 132.0205 989.0654 127.2988 986.5732 125.5928 c984.085 123.8896 975.4102 119.2783 972.1348 118.627 c968.8555 117.9697 965.8965 112.5762 967.0771 110.4785 C967.2061 110.3467 966.1592 108.7725 967.4688 107.9883 c968.7793 107.2002 996.5381 103.9375 1007.9463 105.9053 C1014.1113 106.4326 1020.1406 110.2354 Y1028.9453 110.6826 l1022.9131 107.4053 1024.8809 104.5225 V1025.0088 104.3896 1022.9131 102.6855 1025.6641 101.5068 c1028.4199 100.3271 1056.3486 97.0488 1063.0342 98.3623 c1069.7217 99.6699 1076.4092 106.4893 1079.0303 106.6201 C1086.6348 105.0449 1087.1611 105.0449 v1087.6836 105.0449 1099.4854 108.1924 1099.4854 109.373 c1099.4854 110.5557 1099.4854 116.3242 Y1101.4521 118.5498 1099.4854 127.0752 V1099.4854 127.2051 1104.9922 135.4668 1103.8125 160.4424 cf0 D1058.7061 148.8389 m1054.7744 146.3477 1055.9531 133.6279 1056.2148 133.7598 C1055.5625 132.7109 1049.6602 125.3701 Y1050.4482 127.335 1049.5273 134.8086 1049.5273 135.0713 C1052.2832 135.8574 1055.4297 170.4736 Y1056.2148 167.5889 1055.5625 160.5078 v1054.9043 153.4268 1058.7061 151.4609 Y1058.8369 148.7109 1058.7061 148.8389 Vf*U0.47451 0.501961 0.627451 0.192157 0.490196 0.423529 0.352941 Xa957.2109 399.7881 m957.2109 425.542 L911.707 434.9004 L912.9902 441.1543 L800.2148 464.2803 L798.9443 458.0928 L791.5752 459.6084 L791.5752 399.7617 L789.7783 399.5654 788.6992 399.3203 788.6992 399.0547 C788.6992 394.3877 L788.6992 394.1221 789.7783 393.8779 791.5752 393.6816 C791.5752 390.3018 L841.0957 390.3018 L841.0957 385.6016 L841.0957 382.3584 843.5713 379.7285 846.6279 379.7285 C853.8379 379.7285 L853.8379 157.707 L843.6387 157.707 L840.582 157.707 838.1055 155.0771 838.1055 151.835 C838.1055 140.0869 L822.8457 140.0869 L817.5498 140.0869 813.2568 135.5293 813.2568 129.9063 C813.2568 89.1836 L813.2568 83.5605 817.5498 79.0029 822.8457 79.0029 C921.1367 79.0029 L926.4346 79.0029 930.7295 83.5605 930.7295 89.1836 C930.7295 129.9063 L930.7295 135.5293 926.4346 140.0869 921.1367 140.0869 C905.875 140.0869 L905.875 151.835 L905.875 155.0771 903.4023 157.707 900.3438 157.707 C896.125 157.707 L896.125 379.7285 L903.335 379.7285 L906.3916 379.7285 908.8643 382.3584 908.8643 385.6016 C908.8643 391.4756 L957.2109 391.4756 L957.2109 393.6543 L959.1553 393.8555 960.3242 394.1104 960.3242 394.3877 C960.3242 399.0547 L960.3242 399.332 959.1553 399.5879 957.2109 399.7881 Cf*u1 D0.290196 0.745098 0.717647 0.192157 0.607843 0.313726 0.266667 Xa788.0879 25.042 m783.918 26.8955 773.4863 30.6025 772.0957 31.7646 c770.7051 32.9219 758.418 42.8896 756.7969 45.4375 C760.5059 48.916 760.043 49.8428 v759.5781 50.7695 753.0898 61.8945 752.1602 64.2119 c751.2344 66.5332 746.416 86.1973 Y751.0508 91.9932 749.8926 100.1045 v748.7324 108.2158 748.0371 118.6504 744.0977 121.4307 C744.5605 121.4307 744.0977 139.0439 726.7129 146.6963 C717.4414 151.5605 707.1445 152.7227 696.7148 157.126 c686.2832 161.5303 677.7051 161.9932 Y677.4746 166.8613 675.9297 168.251 V676.084 168.0986 675.9297 171.0332 674.2305 172.5781 C673.7676 173.042 673.4551 178.2939 666.9668 179.0693 C666.9668 178.9141 666.502 180.6143 664.6484 181.2334 C664.957 184.0137 661.4023 187.874 v657.8496 191.7402 636.5244 212.1357 628.0273 218.3174 C623.5439 237.4814 L636.3691 254.4785 629.2627 268.3848 v626.1719 274.4121 621.4902 277.9004 612.7266 296.8184 C612.8809 296.9746 613.4355 308.3887 603.9648 315.7383 C611.3438 329.2891 612.6992 332.9033 V613 333.0547 619.9258 334.4092 621.7324 338.4746 C621.8828 338.3232 630.4648 338.9268 633.0244 340.583 c635.5859 342.2383 634.6816 344.6475 633.627 346.6055 C633.3262 347.0576 633.9277 349.6162 635.2832 349.3164 c636.6396 349.0156 635.5859 352.1787 634.6816 352.3281 C634.833 352.1787 637.6924 354.5879 636.1875 355.9404 C635.5859 356.3936 634.0801 358.2002 634.9824 358.8027 c635.8857 359.4043 639.6504 361.3623 639.5 362.7178 c639.3477 364.0723 635.2852 367.3838 635.1348 368.5879 C636.1875 403.9746 627.4541 402.3184 V627.4541 402.168 626.5508 407.2871 620.9805 407.7383 C621.1309 407.7383 622.4854 413.1582 603.9648 410.1465 C603.6641 409.998 589.0586 413.0088 585.7461 406.9863 C585.5938 406.9863 578.3672 407.8896 573.0977 397.5 c567.8281 387.1094 555.9316 344.1963 572.9473 332.6006 C572.7949 332.4531 568.127 329.1367 568.127 327.4814 C559.2441 329.4375 551.4141 318.5977 v543.584 307.7559 537.2617 288.333 535.9043 274.4795 c534.5498 260.627 543.4326 232.6191 539.5186 214.249 C538.1641 206.1191 522.1748 157.5898 527.041 129.7754 C527.9697 126.7617 548.1348 123.2842 Y557.1748 110.998 576.1816 109.6074 v595.1885 108.2158 626.7129 108.6807 626.9453 108.6807 c627.1758 108.6807 684.7578 96.8604 696.8105 99.1777 C697.043 98.7139 698.2012 93.1504 Y693.334 90.8311 687.7715 72.5205 v682.209 54.209 672.8379 22.7578 674.4609 1.66602 c674.6934 -0.651367 678.4023 -0.884766 Y676.084 -10.6182 678.1699 -14.3281 v680.2559 -18.0371 684.8926 -24.0645 684.1973 -30.0889 C683.7324 -31.4795 689.5273 -31.4795 689.2969 -30.0889 c689.0645 -28.6992 689.7598 -19.6592 692.3105 -17.8066 C692.541 -18.0371 697.873 -20.3525 699.0313 -21.7432 c700.1914 -23.1377 705.7539 -34.0293 724.5293 -35.6543 c740.9863 -37.043 742.6094 -33.7969 Y745.3906 -31.0156 739.8262 -27.7715 v734.2637 -24.5273 725.9199 -18.7324 724.7617 -18.9639 C714.5625 -8.30078 713.1719 -2.96875 V717.8066 -2.50488 718.2695 -0.651367 v718.7324 1.20313 720.125 13.7197 Y727.3594 31.7646 L730.373 27.8223 730.373 26.4326 v730.373 25.042 735.2402 24.8086 735.0098 26.8955 c734.7754 28.9795 734.3125 31.2998 Y736.4004 32.6914 749.3789 20.6377 v762.3594 8.58496 780.4395 11.3652 791.1016 19.0127 C791.7969 19.7109 792.2617 23.1855 788.0879 25.042 cf0 D619.0625 181.2334 m619.3721 182.3145 618.291 182.7783 v617.209 183.2402 607.4736 186.7939 Y608.4004 194.6758 L619.0625 186.4854 624.4717 179.9961 Y619.0625 181.2334 Lf*U0.658823 0.231373 0.337255 0.003922 0.356863 0.619608 0.647059 Xa100.9424 446.3262 m102.2549 454.2031 104.0601 454.3672 v105.8657 454.5313 113.9077 455.1865 117.1895 455.5166 c120.4722 455.8447 123.0972 458.7969 123.0972 460.7676 c123.0972 462.7383 120.6362 464.543 121.292 465.8535 c121.9492 467.168 125.0684 468.4814 122.9331 470.4502 C123.0972 470.4502 125.231 472.0908 124.4102 473.5684 c123.5903 475.0469 122.9331 476.3584 123.2622 478.1631 C123.4263 478.6553 128.3491 479.9688 128.8418 481.2832 c129.334 482.5947 128.021 485.0576 126.3799 486.2051 C125.8872 486.6982 121.6206 492.6055 120.1436 495.0664 C120.1436 495.3955 121.292 498.6777 121.4565 500.1563 c121.6206 501.6318 118.6665 507.7041 118.1743 510.9863 C118.3384 510.8223 119.9795 509.0176 120.3076 507.54 C120.3076 507.7041 117.8467 515.418 116.2056 518.8643 C118.1743 516.4023 118.8306 514.7617 V118.6665 514.7617 118.0103 522.1455 108.4917 526.084 c98.9731 530.0234 77.6382 533.4707 71.0737 522.1465 C71.0737 521.9824 58.437 519.1934 58.1089 500.4824 c57.7813 481.7734 62.8677 475.0469 y62.3755 476.6865 62.2114 478.1631 V62.0479 478.1631 65.1655 472.4189 66.4785 470.9434 C66.6426 470.9434 66.1504 472.0908 66.1504 473.0762 C65.9858 472.9121 68.4478 469.958 68.6123 468.3174 C68.6123 468.4814 69.1055 462.9004 65.0015 453.3828 C60.4067 450.9229 59.4219 450.9229 v58.437 450.9229 57.7813 447.9688 y43.9946 442.7168 41.8618 434.6748 v39.7285 426.6348 45.3086 412.5186 y52.2002 380.8467 55.1538 375.7588 v58.1089 370.6709 74.6841 331.2832 76.4893 326.0313 c78.2939 320.7793 75.832 315.5293 75.0122 313.5596 c74.1909 311.5898 77.9658 312.2461 y73.8628 304.042 73.207 302.8916 v72.5498 301.7422 73.3711 301.251 y68.9395 289.4355 68.9395 289.9268 v68.9395 290.4199 65.9858 291.8965 65.9858 285.4951 C65.9858 283.8555 61.2256 263.668 63.6885 250.54 c66.1504 237.4111 68.6123 215.583 70.0894 198.5156 c71.5664 181.4482 77.8018 163.5596 77.3101 125.3223 C71.8945 117.1152 75.5044 107.4326 V75.6689 107.4326 60.2417 30.2998 64.6729 -11.5479 C64.8374 -13.3525 68.7754 -11.875 y67.7905 -19.5117 68.6113 -22.3027 V68.4473 -22.4678 67.1357 -23.9434 67.2993 -25.4219 c67.4634 -26.8984 67.231 -33.5557 67.7236 -33.7197 c68.2153 -33.8848 84.5317 -35.1787 85.3516 -35.3438 c86.1719 -35.5068 92.9004 -34.3594 y124.1768 -35.6826 141.0859 -36 V142.0703 -35.5068 141.3135 -32.2266 140.0015 -31.8965 C140.1655 -31.8965 140.8813 -30.6465 y143.5459 -36 181.252 -36 V182.2368 -35.6719 181.5815 -30.9746 180.4321 -30.6465 C181.0884 -30.8096 181.6611 -20.8096 175.5137 -18.1455 c172.4653 -16.8242 157.5605 -14.502 152.9648 -8.92188 C152.6377 -9.08691 154.6064 -9.08496 154.7705 -7.77246 c154.9351 -6.46094 151.8169 0.432617 150.832 6.50391 c149.8481 12.5762 154.2778 29.1523 150.8315 38.5068 C150.9961 38.5068 148.3696 120.7246 149.0259 135.0029 C148.8618 135.0029 150.8315 139.5986 150.0107 156.0098 c149.1899 172.4209 148.6987 183.9082 147.7139 187.0273 C147.8779 187.0273 142.9541 241.3477 y146.728 270.7246 146.2368 283.3604 v145.7441 295.9971 148.3696 297.9668 146.5649 299.9365 C146.5649 299.7725 148.8618 310.6035 146.8921 311.0957 C147.0566 310.9316 151.4888 307.9775 151.8159 310.2754 c152.1445 312.5713 150.9956 314.2148 151.1597 322.4209 c151.3247 330.625 150.3389 365.4189 147.5498 373.9531 C147.7129 373.9531 153.4575 370.1777 155.2627 370.1777 c157.0674 370.1777 164.6172 368.5381 168.064 372.1484 c171.5098 375.7578 172.4946 384.7852 172.4946 388.8857 c172.4946 392.9902 169.376 394.3018 y170.853 396.9297 171.0171 398.5684 v171.1807 400.2109 174.1357 405.2988 175.4478 406.4473 c176.7607 407.5947 175.6128 412.0273 173.8076 413.5039 c172.002 414.9805 170.5249 418.5918 167.4067 419.4111 c164.2881 420.2324 158.7095 418.4277 154.4414 416.1309 C154.4414 415.9668 147.5498 415.8018 144.4307 412.6836 C144.4307 412.8477 144.2671 414.9785 143.6099 416.9473 c142.9531 418.918 136.7183 419.7383 y135.2402 424.1699 130.4805 424.0059 V130.1528 423.8418 120.4697 431.2266 118.665 431.2266 C118.665 431.0625 118.0117 439.7617 100.9424 446.3262 cf*u1 D0.454902 0.666667 0.623529 0.341176 0.431373 0.290196 0.27451 Xa463.0732 -29.8203 m463.4053 -29.6553 465.7427 -23.8135 460.5679 -22.6494 c455.3965 -21.4775 437.3716 -16.9736 436.5381 -16.4717 c435.7031 -15.9697 425.022 -6.79199 423.6875 -2.62305 C423.521 -2.62305 425.022 -0.949219 422.6875 -0.119141 C422.854 0.050781 425.3569 9.56055 420.5181 13.0664 C420.3501 13.0664 425.3569 17.5703 424.3564 22.0771 c423.354 26.5811 416.6782 39.4346 428.0273 100.8438 C429.5283 106.3525 427.8594 111.5234 Y432.0313 118.5342 434.3672 122.0391 v436.7031 125.543 440.5415 142.5654 435.7031 150.4082 c430.8623 158.252 423.354 162.7559 406.9995 167.2637 c390.645 171.7686 384.9219 174.7715 377.9116 175.2725 C377.8584 175.2725 377.3896 175.8779 376.7422 176.7344 C386.8262 176.5693 399.1875 174.833 412.4409 169.4951 C414.8042 176.4043 414.749 195.3525 Y370.5928 184.8311 L369.6782 186.1396 368.4941 187.5479 366.7314 188.291 c363.5596 189.626 355.8833 191.2959 Y356.0503 192.1309 354.7158 192.4609 V354.5479 192.4609 356.8838 194.9648 348.5415 199.8047 C348.3735 199.4717 330.5176 218.8291 Y353.8823 231.3457 374.2407 236.8525 V378.7471 237.5195 392.0977 244.6943 392.9326 245.5293 c393.7671 246.3643 389.5938 253.873 Y392.2632 255.877 392.5967 256.3779 v392.9326 256.877 391.9297 258.0469 Y395.1006 259.0469 397.103 261.0498 v399.1069 263.0518 399.2754 263.5537 400.7764 264.3887 C400.9429 264.3887 399.7734 260.5488 401.4429 259.8818 C402.6108 259.5479 404.1123 262.2197 405.2813 262.7188 c406.4497 263.2197 408.4526 264.8887 408.6191 266.8916 c408.7852 268.8926 410.6206 272.5645 408.6191 274.0654 C408.4526 273.9004 411.7886 276.5693 410.6206 279.0752 C410.4551 279.0752 411.7886 284.2461 409.4526 285.249 c407.1172 286.249 403.1108 285.748 400.4414 286.415 C400.2739 286.249 404.2778 289.7559 404.6147 290.5879 c404.9473 291.4229 409.4526 293.2578 410.2871 294.0918 c411.1226 294.9268 416.1294 295.4277 417.2964 297.2627 c418.4653 299.0996 416.4614 300.2676 Y413.4585 299.7666 412.1226 299.7666 v410.7886 299.7666 403.4458 297.2627 402.1099 296.9297 c400.7764 296.5977 392.9321 289.7529 391.4302 289.0859 c389.9287 288.418 380.0815 276.0703 Y379.082 277.4043 378.5806 277.2363 v378.0806 277.0703 374.5757 274.2354 Y373.9072 276.5693 373.2417 276.2354 v372.5718 275.9023 342.5342 263.2197 332.1855 259.3799 c321.8398 255.543 308.4907 253.54 Y304.8179 257.2119 L306.3203 280.5742 301.8149 291.9219 V301.3149 292.9219 300.4795 299.5986 292.9712 312.7822 C292.8032 312.6162 293.6382 318.7959 287.9624 329.8066 C289.4634 333.1465 290.6353 333.6455 v291.8008 334.1465 292.3022 335.8135 292.1343 337.8184 c291.9688 339.8193 293.3047 342.3223 Y305.3081 340.3643 307.8105 341.0322 v310.3135 341.7021 312.8159 344.333 311.8159 347.168 c310.8149 350.0078 311.8472 352.1025 312.8491 352.2705 c313.8486 352.4365 314.1401 354.9844 312.6558 355.3711 c311.6348 355.6367 309.6836 357.5684 Y311.769 359.2051 313.7061 360.0332 v316.458 361.2119 312.0991 364.1758 312.5991 365.8457 C312.9326 366.3457 315.8599 367.2813 317.0273 367.7832 c318.1958 368.2813 318.6074 371.3076 316.8325 372.8613 c313.1533 376.0859 311.6616 380.8721 309.9912 382.04 C309.1577 382.543 308.6567 385.0449 309.9912 385.8799 c311.3271 386.7119 311.3271 390.2188 310.6602 391.3857 c309.9912 392.5537 305.3193 404.0703 304.4858 406.2393 C308.1714 409.8496 307.064 412.3398 v305.7529 415.291 280.835 429.4932 256.9722 419.8125 C245.4556 414.3086 236.2148 397.3965 246.9097 378.3701 C246.9097 378.2002 248.4131 371.3604 252.2515 364.5195 c256.0879 357.6777 258.2588 353.6719 Y255.2559 355.3408 253.9199 353.6719 V250.0811 354.1709 249.2466 354.0059 v248.4131 353.8379 236.564 341.4902 235.396 340.8223 c234.2266 340.1523 235.396 339.1523 Y217.0391 320.9629 210.1978 297.2656 v203.354 273.5693 205.8594 255.2119 203.8555 244.1973 c201.8525 233.1836 193.9478 182.9824 192.6753 173.1064 c188.3936 139.8916 199.6938 110.5781 202.1523 108.5508 c215.1489 97.8496 299.647 104.0176 302.1484 104.1846 c304.6509 104.3525 305.4858 106.3555 Y326.7344 104.0586 341.6987 100.8447 v346.9121 99.7275 361.4414 96.3408 Y344.4194 55.959 347.7583 46.7773 V347.9224 46.7773 332.0703 36.2637 335.0737 33.7617 C334.9058 33.4258 328.5659 31.0908 326.3955 27.4189 C326.23 27.4189 321.0547 24.7471 321.2222 21.7441 c321.3887 18.7432 325.396 10.5605 335.2422 0.050781 C336.0767 -0.949219 339.4126 2.2207 Y347.7583 -7.29297 353.9326 -20.6445 V357.9365 -28.1533 367.9512 -34.8291 381.3003 -34.3271 c394.6509 -33.8281 401.8267 -32.9932 402.6611 -32.8252 c403.4946 -32.6602 402.8276 -30.3223 Y409.8359 -30.9893 423.354 -35.4971 v428.0273 -36.999 459.9019 -34.8311 463.7388 -32.9932 C465.4082 -32.3252 463.9077 -29.8203 463.0732 -29.8203 Cf0 D290.3438 198.2148 m289.3345 201.9678 291.9312 209.3271 Y308.9624 192.875 308.8188 192.875 V301.7476 196.0498 290.3438 198.0713 290.3438 198.2148 Cf*U0.721569 0.623529 0.694118 0.737255 0.121569 0.137255 0.117647 Xa1 XR195.8896 91.6924 m195.9839 91.2783 197.0923 90.9766 198.8936 90.7607 C198.7588 90.7979 198.6182 90.8262 198.4839 90.8652 c197.6187 91.1396 196.7539 91.4189 195.8896 91.6924 Cf*u1 D0.65098 0.490196 0.427451 0.133333 0.380392 0.431373 0.466667 Xa338.7178 93.2266 m338.7178 97.2402 339.0459 101.9707 337.0659 105.6318 c335.3491 108.7734 331.9658 107.7998 329.6177 109.5322 C326.1987 128.5957 325.271 151.8828 309.0059 164.7607 c293.0645 177.3838 217.1323 172.7891 195.4155 172.7334 C194.0078 180.1367 192.2979 187.5967 189.5742 194.6396 c188.3003 197.9375 183.0259 204.1729 183.0591 207.4277 c183.1787 219.501 180.6367 230.6387 176.98 242.207 c173.3281 253.7539 170.9272 266.8848 164.2251 277.1621 c159.7891 284.0137 157.4575 288.5059 154.7988 279.5254 C153.9048 280.1729 152.9614 280.2119 151.9658 279.6445 C152.2051 278.3086 152.4453 276.9756 152.6836 275.6377 c153.417 271.5361 160.0151 238.501 162.6279 189.9541 c164.0679 163.2246 166.2686 133.2109 182.6191 110.7568 c184.1812 108.6133 190.3135 90.2402 Y195.7041 87.8604 200.083 87.3164 205.9321 87.3164 c238.4995 87.3164 271.064 87.8994 303.6294 87.9102 C303.7925 86.5918 301.021 83.9102 304.3408 83.2178 c309.272 82.1895 309.6523 84.7773 310.0645 78.6963 c310.2485 75.999 310.3999 73.2969 310.519 70.5938 c311.0752 57.9756 310.6938 45.3555 310.0479 32.7461 c309.5342 22.6973 311.2339 -8.88672 305.9097 -17.7559 c300.623 -26.5693 284.4839 -26.9941 276.1021 -26.9941 c249.293 -26.9912 222.4844 -26.9941 195.6743 -26.9941 c187.3994 -26.9941 149.2446 -30.2002 153.6025 -33.0615 c157.2407 -35.4473 184.3535 -35.4229 192.1514 -35.4229 c205.6226 -35.4219 219.0947 -35.4219 232.5674 -35.4229 c257.9458 -35.4248 284.5601 -36.9121 309.877 -35.1016 c343.9976 -32.6572 334.8208 43.8115 334.5894 56.1592 c334.3955 66.498 331.9888 77.7969 332.8125 88.0313 C340.5356 88.749 338.7178 87.5654 338.7178 93.2266 cf0 D198.8936 90.7607 m197.0923 90.9766 195.9839 91.2783 195.8896 91.6924 C196.7539 91.4189 197.6187 91.1396 198.4839 90.8652 c198.6182 90.8262 198.7588 90.7979 198.8936 90.7607 C208.5884 89.5967 238.3677 90.8867 238.3096 90.1563 C226.0718 90.1563 210.7432 87.4717 198.8936 90.7607 Cf200.4946 114.1357 m201.5508 126.5127 196.8115 162.1299 196.9556 163.8721 C209.522 163.8721 222.0894 163.7002 234.6563 163.5977 c239.1616 163.5605 267.3154 160.4658 269.6021 163.8721 C271.4111 166.2998 289.3657 164.1348 292.5522 163.6494 c300.165 162.4902 306.6904 158.5254 311.1274 152.2109 c318.6665 141.4766 319.9121 123.1221 321.8208 110.4727 C314.1235 111.0146 235.4751 113.8896 200.4946 114.1357 Cf328.4756 4.69238 m327.5474 -4.52637 322.8335 -24.2861 312.1816 -26.9619 c300.7397 -29.8389 306.4976 -29.6289 311.3794 -20.7715 c315.7983 -12.7529 317.8877 62.1514 316.1479 82.0068 C316.1196 82.6875 326.0664 83.2803 326.5352 83.2764 C329.6909 16.7852 328.4756 4.69238 vf*U1 Ap0.721569 0.623529 0.694118 0.737255 0.121569 0.137255 0.117647 Xa0 XR797.7949 110.293 m1260 110.293 L1260 -36 L797.7949 -36 L797.7949 110.293 Lf0 Ap0.717647 0.580392 0.670588 0.580392 0.184314 0.215686 0.192157 Xa1 XR531.9063 91.6924 m532 91.2783 533.1074 90.9775 534.9092 90.7607 C534.7734 90.7988 534.6338 90.8262 534.5 90.8652 c533.6348 91.1396 532.7705 91.4189 531.9063 91.6924 Cf*u1 D0.698039 0.552941 0.639216 0.45098 0.243137 0.27451 0.25098 Xa674.7344 93.2266 m674.7344 97.2402 675.0625 101.9707 673.082 105.6318 c671.3652 108.7734 667.9824 107.7998 665.6328 109.5322 C662.2148 128.5957 661.2871 151.8828 645.0215 164.7607 c629.0801 177.3838 553.1465 172.7891 531.4316 172.7334 C530.0234 180.1367 528.3145 187.5967 525.5908 194.6396 c524.3164 197.9375 519.042 204.1729 519.0762 207.4277 c519.1934 219.501 516.6533 230.6387 512.9961 242.207 c509.3447 253.7539 506.9453 266.8848 500.2402 277.1621 c495.8047 284.0137 493.4736 288.5059 490.8145 279.5254 C489.9219 280.1729 488.9766 280.2119 487.9824 279.6445 C488.2207 278.3086 488.4609 276.9756 488.6992 275.6377 c489.4336 271.5361 496.0293 238.501 498.6445 189.9541 c500.082 163.2246 502.2842 133.2109 518.6357 110.7568 c520.1973 108.6133 526.3291 90.2402 Y531.7207 87.8604 536.0977 87.3164 541.9473 87.3164 c574.5146 87.3164 607.0801 87.8994 639.6445 87.9102 C639.8086 86.5918 637.0371 83.9102 640.3564 83.2178 c645.2881 82.1895 645.668 84.7773 646.0801 78.6963 c646.2637 75.999 646.416 73.2969 646.5352 70.5938 c647.0918 57.9756 646.709 45.3555 646.0635 32.7461 c645.5498 22.6973 647.249 -8.88672 641.9258 -17.7559 c636.6387 -26.5693 620.499 -26.9941 612.1172 -26.9941 c585.3086 -26.9912 558.5 -26.9941 531.6904 -26.9941 c523.416 -26.9941 485.2598 -30.2002 489.6191 -33.0615 c493.2568 -35.4473 520.3701 -35.4229 528.166 -35.4229 c541.6387 -35.4219 555.1113 -35.4219 568.582 -35.4229 c593.9619 -35.4248 620.5762 -36.9121 645.8926 -35.1016 c680.0137 -32.6572 670.8379 43.8115 670.6055 56.1592 c670.4121 66.498 668.0039 77.7969 668.8281 88.0313 C676.5508 88.749 674.7344 87.5654 674.7344 93.2266 cf0 D534.9092 90.7607 m533.1074 90.9775 532 91.2783 531.9063 91.6924 C532.7705 91.4189 533.6348 91.1396 534.5 90.8652 c534.6338 90.8262 534.7734 90.7988 534.9092 90.7607 C544.6035 89.5967 574.3848 90.8867 574.3262 90.1563 C562.0879 90.1563 546.7588 87.4717 534.9092 90.7607 Cf641.5293 111.5342 m606.5254 112.8496 571.4912 113.8896 536.5098 114.1357 C537.5664 126.5127 535.5225 139.4932 534.3857 151.8252 C534.5547 151.8252 532.9258 163.3086 532.9727 163.8721 C545.5391 163.8721 558.1055 163.7002 570.6719 163.5977 c575.1777 163.5605 603.332 160.4658 605.6191 163.8721 C607.4277 166.2998 625.3828 164.1348 628.5684 163.6494 c636.1797 162.4902 642.707 158.5254 647.1426 152.2109 c654.6816 141.4766 655.9277 123.1221 657.8359 110.4727 C650.1387 111.0146 641.5313 111.5889 641.5293 111.5342 Cf664.4902 4.69238 m663.5625 -4.52637 658.8496 -24.2861 648.1963 -26.9619 c636.7559 -29.8389 642.5137 -29.6289 647.3936 -20.7715 c651.8145 -12.7529 653.9023 62.1514 652.1641 82.0068 C652.1348 82.6875 662.082 83.2803 662.5508 83.2764 C665.707 16.7852 664.4902 4.69238 vf*ULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF